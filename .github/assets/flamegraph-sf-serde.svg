<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="12776"><g><title>bt`DYLD-STUB$$free (10 samples, 0.08%)</title><rect x="0.0000%" y="277" width="0.0783%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="287.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (9 samples, 0.07%)</title><rect x="0.8923%" y="213" width="0.0704%" height="15" fill="rgb(217,0,24)" fg:x="114" fg:w="9"/><text x="1.1423%" y="223.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (22 samples, 0.17%)</title><rect x="0.9627%" y="213" width="0.1722%" height="15" fill="rgb(221,193,54)" fg:x="123" fg:w="22"/><text x="1.2127%" y="223.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (14 samples, 0.11%)</title><rect x="1.1349%" y="213" width="0.1096%" height="15" fill="rgb(248,212,6)" fg:x="145" fg:w="14"/><text x="1.3849%" y="223.50"></text></g><g><title>bt`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="1.4950%" y="181" width="0.0235%" height="15" fill="rgb(208,68,35)" fg:x="191" fg:w="3"/><text x="1.7450%" y="191.50"></text></g><g><title>bt`__rdl_alloc (13 samples, 0.10%)</title><rect x="1.5185%" y="181" width="0.1018%" height="15" fill="rgb(232,128,0)" fg:x="194" fg:w="13"/><text x="1.7685%" y="191.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (32 samples, 0.25%)</title><rect x="1.6202%" y="181" width="0.2505%" height="15" fill="rgb(207,160,47)" fg:x="207" fg:w="32"/><text x="1.8702%" y="191.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (45 samples, 0.35%)</title><rect x="1.8707%" y="181" width="0.3522%" height="15" fill="rgb(228,23,34)" fg:x="239" fg:w="45"/><text x="2.1207%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.07%)</title><rect x="2.7473%" y="149" width="0.0704%" height="15" fill="rgb(218,30,26)" fg:x="351" fg:w="9"/><text x="2.9973%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.14%)</title><rect x="2.8178%" y="149" width="0.1409%" height="15" fill="rgb(220,122,19)" fg:x="360" fg:w="18"/><text x="3.0678%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.07%)</title><rect x="3.1152%" y="133" width="0.0704%" height="15" fill="rgb(250,228,42)" fg:x="398" fg:w="9"/><text x="3.3652%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (15 samples, 0.12%)</title><rect x="3.9058%" y="117" width="0.1174%" height="15" fill="rgb(240,193,28)" fg:x="499" fg:w="15"/><text x="4.1558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (190 samples, 1.49%)</title><rect x="2.5830%" y="165" width="1.4872%" height="15" fill="rgb(216,20,37)" fg:x="330" fg:w="190"/><text x="2.8330%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (142 samples, 1.11%)</title><rect x="2.9587%" y="149" width="1.1115%" height="15" fill="rgb(206,188,39)" fg:x="378" fg:w="142"/><text x="3.2087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (113 samples, 0.88%)</title><rect x="3.1857%" y="133" width="0.8845%" height="15" fill="rgb(217,207,13)" fg:x="407" fg:w="113"/><text x="3.4357%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.05%)</title><rect x="4.0232%" y="117" width="0.0470%" height="15" fill="rgb(231,73,38)" fg:x="514" fg:w="6"/><text x="4.2732%" y="127.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (243 samples, 1.90%)</title><rect x="2.2229%" y="181" width="1.9020%" height="15" fill="rgb(225,20,46)" fg:x="284" fg:w="243"/><text x="2.4729%" y="191.50">b..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.05%)</title><rect x="4.0701%" y="165" width="0.0548%" height="15" fill="rgb(210,31,41)" fg:x="520" fg:w="7"/><text x="4.3201%" y="175.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (377 samples, 2.95%)</title><rect x="1.3228%" y="197" width="2.9508%" height="15" fill="rgb(221,200,47)" fg:x="169" fg:w="377"/><text x="1.5728%" y="207.50">bt`..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.15%)</title><rect x="4.1249%" y="181" width="0.1487%" height="15" fill="rgb(226,26,5)" fg:x="527" fg:w="19"/><text x="4.3749%" y="191.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (40 samples, 0.31%)</title><rect x="4.2736%" y="197" width="0.3131%" height="15" fill="rgb(249,33,26)" fg:x="546" fg:w="40"/><text x="4.5236%" y="207.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (13 samples, 0.10%)</title><rect x="4.5867%" y="197" width="0.1018%" height="15" fill="rgb(235,183,28)" fg:x="586" fg:w="13"/><text x="4.8367%" y="207.50"></text></g><g><title>bt`bincode::varint::decode_unsigned::varint_decode_u32 (9 samples, 0.07%)</title><rect x="4.6885%" y="197" width="0.0704%" height="15" fill="rgb(221,5,38)" fg:x="599" fg:w="9"/><text x="4.9385%" y="207.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (451 samples, 3.53%)</title><rect x="1.2445%" y="213" width="3.5301%" height="15" fill="rgb(247,18,42)" fg:x="159" fg:w="451"/><text x="1.4945%" y="223.50">bt`..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="4.7589%" y="197" width="0.0157%" height="15" fill="rgb(241,131,45)" fg:x="608" fg:w="2"/><text x="5.0089%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="4.7589%" y="181" width="0.0157%" height="15" fill="rgb(249,31,29)" fg:x="608" fg:w="2"/><text x="5.0089%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="4.7589%" y="165" width="0.0157%" height="15" fill="rgb(225,111,53)" fg:x="608" fg:w="2"/><text x="5.0089%" y="175.50"></text></g><g><title>bt`DYLD-STUB$$calloc (4 samples, 0.03%)</title><rect x="4.8685%" y="181" width="0.0313%" height="15" fill="rgb(238,160,17)" fg:x="622" fg:w="4"/><text x="5.1185%" y="191.50"></text></g><g><title>bt`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="4.8998%" y="181" width="0.0157%" height="15" fill="rgb(214,148,48)" fg:x="626" fg:w="2"/><text x="5.1498%" y="191.50"></text></g><g><title>bt`__rdl_alloc_zeroed (10 samples, 0.08%)</title><rect x="4.9155%" y="181" width="0.0783%" height="15" fill="rgb(232,36,49)" fg:x="628" fg:w="10"/><text x="5.1655%" y="191.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (19 samples, 0.15%)</title><rect x="4.9937%" y="181" width="0.1487%" height="15" fill="rgb(209,103,24)" fg:x="638" fg:w="19"/><text x="5.2437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (12 samples, 0.09%)</title><rect x="5.3773%" y="149" width="0.0939%" height="15" fill="rgb(229,88,8)" fg:x="687" fg:w="12"/><text x="5.6273%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.16%)</title><rect x="5.4712%" y="149" width="0.1565%" height="15" fill="rgb(213,181,19)" fg:x="699" fg:w="20"/><text x="5.7212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (9 samples, 0.07%)</title><rect x="5.8547%" y="133" width="0.0704%" height="15" fill="rgb(254,191,54)" fg:x="748" fg:w="9"/><text x="6.1047%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.12%)</title><rect x="5.9252%" y="133" width="0.1174%" height="15" fill="rgb(241,83,37)" fg:x="757" fg:w="15"/><text x="6.1752%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="6.0426%" y="133" width="0.0235%" height="15" fill="rgb(233,36,39)" fg:x="772" fg:w="3"/><text x="6.2926%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (11 samples, 0.09%)</title><rect x="6.8723%" y="117" width="0.0861%" height="15" fill="rgb(226,3,54)" fg:x="878" fg:w="11"/><text x="7.1223%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (225 samples, 1.76%)</title><rect x="5.2442%" y="165" width="1.7611%" height="15" fill="rgb(245,192,40)" fg:x="670" fg:w="225"/><text x="5.4942%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (176 samples, 1.38%)</title><rect x="5.6277%" y="149" width="1.3776%" height="15" fill="rgb(238,167,29)" fg:x="719" fg:w="176"/><text x="5.8777%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (120 samples, 0.94%)</title><rect x="6.0661%" y="133" width="0.9393%" height="15" fill="rgb(232,182,51)" fg:x="775" fg:w="120"/><text x="6.3161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.05%)</title><rect x="6.9584%" y="117" width="0.0470%" height="15" fill="rgb(231,60,39)" fg:x="889" fg:w="6"/><text x="7.2084%" y="127.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (255 samples, 2.00%)</title><rect x="5.1425%" y="181" width="1.9959%" height="15" fill="rgb(208,69,12)" fg:x="657" fg:w="255"/><text x="5.3925%" y="191.50">b..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.13%)</title><rect x="7.0053%" y="165" width="0.1331%" height="15" fill="rgb(235,93,37)" fg:x="895" fg:w="17"/><text x="7.2553%" y="175.50"></text></g><g><title>bt`core::str::converts::from_utf8 (69 samples, 0.54%)</title><rect x="7.1384%" y="181" width="0.5401%" height="15" fill="rgb(213,116,39)" fg:x="912" fg:w="69"/><text x="7.3884%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (22 samples, 0.17%)</title><rect x="7.6785%" y="181" width="0.1722%" height="15" fill="rgb(222,207,29)" fg:x="981" fg:w="22"/><text x="7.9285%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (12 samples, 0.09%)</title><rect x="7.8507%" y="181" width="0.0939%" height="15" fill="rgb(206,96,30)" fg:x="1003" fg:w="12"/><text x="8.1007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.05%)</title><rect x="7.9446%" y="181" width="0.0470%" height="15" fill="rgb(218,138,4)" fg:x="1015" fg:w="6"/><text x="8.1946%" y="191.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (495 samples, 3.87%)</title><rect x="4.8215%" y="197" width="3.8745%" height="15" fill="rgb(250,191,14)" fg:x="616" fg:w="495"/><text x="5.0715%" y="207.50">bt`b..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.70%)</title><rect x="7.9915%" y="181" width="0.7044%" height="15" fill="rgb(239,60,40)" fg:x="1021" fg:w="90"/><text x="8.2415%" y="191.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (19 samples, 0.15%)</title><rect x="8.6960%" y="197" width="0.1487%" height="15" fill="rgb(206,27,48)" fg:x="1111" fg:w="19"/><text x="8.9460%" y="207.50"></text></g><g><title>bt`core::str::converts::from_utf8 (7 samples, 0.05%)</title><rect x="8.8447%" y="197" width="0.0548%" height="15" fill="rgb(225,35,8)" fg:x="1130" fg:w="7"/><text x="9.0947%" y="207.50"></text></g><g><title>bt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (97 samples, 0.76%)</title><rect x="9.1187%" y="181" width="0.7592%" height="15" fill="rgb(250,213,24)" fg:x="1165" fg:w="97"/><text x="9.3687%" y="191.50"></text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (164 samples, 1.28%)</title><rect x="8.8995%" y="197" width="1.2837%" height="15" fill="rgb(247,123,22)" fg:x="1137" fg:w="164"/><text x="9.1495%" y="207.50"></text></g><g><title>bt`core::hash::BuildHasher::hash_one (39 samples, 0.31%)</title><rect x="9.8779%" y="181" width="0.3053%" height="15" fill="rgb(231,138,38)" fg:x="1262" fg:w="39"/><text x="10.1279%" y="191.50"></text></g><g><title>bt`bincode::features::impl_std::_&lt;impl bincode::de::Decode&lt;Context&gt; for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::decode (695 samples, 5.44%)</title><rect x="4.7746%" y="213" width="5.4399%" height="15" fill="rgb(231,145,46)" fg:x="610" fg:w="695"/><text x="5.0246%" y="223.50">bt`binc..</text></g><g><title>bt`&lt;bintensors::tensor::Metadata as bincode::de::Decode&lt;__Context&gt;&gt;::decode (1,197 samples, 9.37%)</title><rect x="0.8923%" y="229" width="9.3691%" height="15" fill="rgb(251,118,11)" fg:x="114" fg:w="1197"/><text x="1.1423%" y="239.50">bt`&lt;bintensor..</text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.05%)</title><rect x="10.2145%" y="213" width="0.0470%" height="15" fill="rgb(217,147,25)" fg:x="1305" fg:w="6"/><text x="10.4645%" y="223.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::read_metadata (1,297 samples, 10.15%)</title><rect x="0.4305%" y="245" width="10.1518%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="1297"/><text x="0.6805%" y="255.50">bt`bintensors::..</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (41 samples, 0.32%)</title><rect x="10.2614%" y="229" width="0.3209%" height="15" fill="rgb(209,12,38)" fg:x="1311" fg:w="41"/><text x="10.5114%" y="239.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::deserialize (1,308 samples, 10.24%)</title><rect x="0.4305%" y="261" width="10.2379%" height="15" fill="rgb(227,1,9)" fg:x="55" fg:w="1308"/><text x="0.6805%" y="271.50">bt`bintensors::..</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (11 samples, 0.09%)</title><rect x="10.5823%" y="245" width="0.0861%" height="15" fill="rgb(248,47,43)" fg:x="1352" fg:w="11"/><text x="10.8323%" y="255.50"></text></g><g><title>bt`bintensors::tensor::serialize (2 samples, 0.02%)</title><rect x="10.6763%" y="261" width="0.0157%" height="15" fill="rgb(221,10,30)" fg:x="1364" fg:w="2"/><text x="10.9263%" y="271.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (3 samples, 0.02%)</title><rect x="10.6997%" y="245" width="0.0235%" height="15" fill="rgb(210,229,1)" fg:x="1367" fg:w="3"/><text x="10.9497%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.02%)</title><rect x="10.6997%" y="229" width="0.0235%" height="15" fill="rgb(222,148,37)" fg:x="1367" fg:w="3"/><text x="10.9497%" y="239.50"></text></g><g><title>bt`std::io::Write::write_all (1,288 samples, 10.08%)</title><rect x="10.7311%" y="229" width="10.0814%" height="15" fill="rgb(234,67,33)" fg:x="1371" fg:w="1288"/><text x="10.9811%" y="239.50">bt`std::io::Wri..</text></g><g><title>libsystem_kernel.dylib`write (1,287 samples, 10.07%)</title><rect x="10.7389%" y="213" width="10.0736%" height="15" fill="rgb(247,98,35)" fg:x="1372" fg:w="1287"/><text x="10.9889%" y="223.50">libsystem_kerne..</text></g><g><title>bt`bintensors::tensor::serialize_to_file (1,305 samples, 10.21%)</title><rect x="10.6919%" y="261" width="10.2145%" height="15" fill="rgb(247,138,52)" fg:x="1366" fg:w="1305"/><text x="10.9419%" y="271.50">bt`bintensors::..</text></g><g><title>bt`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1,301 samples, 10.18%)</title><rect x="10.7232%" y="245" width="10.1832%" height="15" fill="rgb(213,79,30)" fg:x="1370" fg:w="1301"/><text x="10.9732%" y="255.50">bt`std::io::buf..</text></g><g><title>bt`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.09%)</title><rect x="20.8125%" y="229" width="0.0939%" height="15" fill="rgb(246,177,23)" fg:x="2659" fg:w="12"/><text x="21.0625%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 0.09%)</title><rect x="20.8125%" y="213" width="0.0939%" height="15" fill="rgb(230,62,27)" fg:x="2659" fg:w="12"/><text x="21.0625%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (63 samples, 0.49%)</title><rect x="20.9064%" y="245" width="0.4931%" height="15" fill="rgb(216,154,8)" fg:x="2671" fg:w="63"/><text x="21.1564%" y="255.50"></text></g><g><title>bt`memmap2::os::MmapInner::map (64 samples, 0.50%)</title><rect x="20.9064%" y="261" width="0.5009%" height="15" fill="rgb(244,35,45)" fg:x="2671" fg:w="64"/><text x="21.1564%" y="271.50"></text></g><g><title>bt`memmap2::os::file_len (16 samples, 0.13%)</title><rect x="21.4073%" y="261" width="0.1252%" height="15" fill="rgb(251,115,12)" fg:x="2735" fg:w="16"/><text x="21.6573%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`fstat (16 samples, 0.13%)</title><rect x="21.4073%" y="245" width="0.1252%" height="15" fill="rgb(240,54,50)" fg:x="2735" fg:w="16"/><text x="21.6573%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (214 samples, 1.68%)</title><rect x="21.5404%" y="245" width="1.6750%" height="15" fill="rgb(233,84,52)" fg:x="2752" fg:w="214"/><text x="21.7904%" y="255.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (215 samples, 1.68%)</title><rect x="21.5404%" y="261" width="1.6828%" height="15" fill="rgb(207,117,47)" fg:x="2752" fg:w="215"/><text x="21.7904%" y="271.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (2 samples, 0.02%)</title><rect x="23.2232%" y="245" width="0.0157%" height="15" fill="rgb(249,43,39)" fg:x="2967" fg:w="2"/><text x="23.4732%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="23.2232%" y="229" width="0.0157%" height="15" fill="rgb(209,38,44)" fg:x="2967" fg:w="2"/><text x="23.4732%" y="239.50"></text></g><g><title>bt`std::fs::read::inner (2,228 samples, 17.44%)</title><rect x="23.2232%" y="261" width="17.4389%" height="15" fill="rgb(236,212,23)" fg:x="2967" fg:w="2228"/><text x="23.4732%" y="271.50">bt`std::fs::read::inner</text></g><g><title>libsystem_kernel.dylib`read (2,226 samples, 17.42%)</title><rect x="23.2389%" y="245" width="17.4233%" height="15" fill="rgb(242,79,21)" fg:x="2969" fg:w="2226"/><text x="23.4889%" y="255.50">libsystem_kernel.dylib`read</text></g><g><title>bt`std::fs::write::inner (2 samples, 0.02%)</title><rect x="40.6622%" y="261" width="0.0157%" height="15" fill="rgb(211,96,35)" fg:x="5195" fg:w="2"/><text x="40.9122%" y="271.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (2 samples, 0.02%)</title><rect x="40.6622%" y="245" width="0.0157%" height="15" fill="rgb(253,215,40)" fg:x="5195" fg:w="2"/><text x="40.9122%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="40.6622%" y="229" width="0.0157%" height="15" fill="rgb(211,81,21)" fg:x="5195" fg:w="2"/><text x="40.9122%" y="239.50"></text></g><g><title>bt`std::sys::pal::unix::fs::unlink (318 samples, 2.49%)</title><rect x="40.6778%" y="261" width="2.4890%" height="15" fill="rgb(208,190,38)" fg:x="5197" fg:w="318"/><text x="40.9278%" y="271.50">bt..</text></g><g><title>libsystem_kernel.dylib`__unlink (318 samples, 2.49%)</title><rect x="40.6778%" y="245" width="2.4890%" height="15" fill="rgb(235,213,38)" fg:x="5197" fg:w="318"/><text x="40.9278%" y="255.50">li..</text></g><g><title>libsystem_kernel.dylib`close (6 samples, 0.05%)</title><rect x="43.1669%" y="261" width="0.0470%" height="15" fill="rgb(237,122,38)" fg:x="5515" fg:w="6"/><text x="43.4169%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (1,298 samples, 10.16%)</title><rect x="43.2138%" y="261" width="10.1597%" height="15" fill="rgb(244,218,35)" fg:x="5521" fg:w="1298"/><text x="43.4638%" y="271.50">libsystem_kerne..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (12 samples, 0.09%)</title><rect x="53.3735%" y="261" width="0.0939%" height="15" fill="rgb(240,68,47)" fg:x="6819" fg:w="12"/><text x="53.6235%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (217 samples, 1.70%)</title><rect x="53.7257%" y="245" width="1.6985%" height="15" fill="rgb(210,16,53)" fg:x="6864" fg:w="217"/><text x="53.9757%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (643 samples, 5.03%)</title><rect x="53.4674%" y="261" width="5.0329%" height="15" fill="rgb(235,124,12)" fg:x="6831" fg:w="643"/><text x="53.7174%" y="271.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free_large (393 samples, 3.08%)</title><rect x="55.4242%" y="245" width="3.0761%" height="15" fill="rgb(224,169,11)" fg:x="7081" fg:w="393"/><text x="55.6742%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (393 samples, 3.08%)</title><rect x="55.4242%" y="229" width="3.0761%" height="15" fill="rgb(250,166,2)" fg:x="7081" fg:w="393"/><text x="55.6742%" y="239.50">lib..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (393 samples, 3.08%)</title><rect x="55.4242%" y="213" width="3.0761%" height="15" fill="rgb(242,216,29)" fg:x="7081" fg:w="393"/><text x="55.6742%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (50 samples, 0.39%)</title><rect x="59.6666%" y="245" width="0.3914%" height="15" fill="rgb(230,116,27)" fg:x="7623" fg:w="50"/><text x="59.9166%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.13%)</title><rect x="60.0579%" y="245" width="0.1331%" height="15" fill="rgb(228,99,48)" fg:x="7673" fg:w="17"/><text x="60.3079%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="60.1910%" y="245" width="0.0470%" height="15" fill="rgb(253,11,6)" fg:x="7690" fg:w="6"/><text x="60.4410%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (89 samples, 0.70%)</title><rect x="62.5470%" y="229" width="0.6966%" height="15" fill="rgb(247,143,39)" fg:x="7991" fg:w="89"/><text x="62.7970%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (734 samples, 5.75%)</title><rect x="58.5003%" y="261" width="5.7451%" height="15" fill="rgb(236,97,10)" fg:x="7474" fg:w="734"/><text x="58.7503%" y="271.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (512 samples, 4.01%)</title><rect x="60.2379%" y="245" width="4.0075%" height="15" fill="rgb(233,208,19)" fg:x="7696" fg:w="512"/><text x="60.4879%" y="255.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (128 samples, 1.00%)</title><rect x="63.2436%" y="229" width="1.0019%" height="15" fill="rgb(216,164,2)" fg:x="8080" fg:w="128"/><text x="63.4936%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (162 samples, 1.27%)</title><rect x="64.2455%" y="261" width="1.2680%" height="15" fill="rgb(220,129,5)" fg:x="8208" fg:w="162"/><text x="64.4955%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (162 samples, 1.27%)</title><rect x="64.2455%" y="245" width="1.2680%" height="15" fill="rgb(242,17,10)" fg:x="8208" fg:w="162"/><text x="64.4955%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.11%)</title><rect x="65.5135%" y="261" width="0.1096%" height="15" fill="rgb(242,107,0)" fg:x="8370" fg:w="14"/><text x="65.7635%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (977 samples, 7.65%)</title><rect x="65.6230%" y="261" width="7.6472%" height="15" fill="rgb(251,28,31)" fg:x="8384" fg:w="977"/><text x="65.8730%" y="271.50">libsystem_..</text></g><g><title>bt`bt::main (9,459 samples, 74.04%)</title><rect x="0.0861%" y="277" width="74.0373%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="9459"/><text x="0.3361%" y="287.50">bt`bt::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (109 samples, 0.85%)</title><rect x="73.2702%" y="261" width="0.8532%" height="15" fill="rgb(215,21,27)" fg:x="9361" fg:w="109"/><text x="73.5202%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (237 samples, 1.86%)</title><rect x="74.1234%" y="277" width="1.8550%" height="15" fill="rgb(232,23,21)" fg:x="9470" fg:w="237"/><text x="74.3734%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`close (82 samples, 0.64%)</title><rect x="75.9784%" y="277" width="0.6418%" height="15" fill="rgb(244,5,23)" fg:x="9707" fg:w="82"/><text x="76.2284%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (33 samples, 0.26%)</title><rect x="76.6202%" y="277" width="0.2583%" height="15" fill="rgb(226,81,46)" fg:x="9789" fg:w="33"/><text x="76.8702%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (24 samples, 0.19%)</title><rect x="76.8785%" y="277" width="0.1879%" height="15" fill="rgb(247,70,30)" fg:x="9822" fg:w="24"/><text x="77.1285%" y="287.50"></text></g><g><title>bt`main (9,869 samples, 77.25%)</title><rect x="0.0000%" y="341" width="77.2464%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="351.50">bt`main</text></g><g><title>bt`std::rt::lang_start_internal (9,869 samples, 77.25%)</title><rect x="0.0000%" y="325" width="77.2464%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="335.50">bt`std::rt::lang_start_internal</text></g><g><title>bt`std::rt::lang_start::_{{closure}} (9,869 samples, 77.25%)</title><rect x="0.0000%" y="309" width="77.2464%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="319.50">bt`std::rt::lang_start::_{{closure}}</text></g><g><title>bt`std::sys::backtrace::__rust_begin_short_backtrace (9,869 samples, 77.25%)</title><rect x="0.0000%" y="293" width="77.2464%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="303.50">bt`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.18%)</title><rect x="77.0664%" y="277" width="0.1800%" height="15" fill="rgb(241,108,4)" fg:x="9846" fg:w="23"/><text x="77.3164%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (244 samples, 1.91%)</title><rect x="77.2542%" y="277" width="1.9098%" height="15" fill="rgb(247,173,49)" fg:x="9870" fg:w="244"/><text x="77.5042%" y="287.50">l..</text></g><g><title>libsystem_kernel.dylib`close (6 samples, 0.05%)</title><rect x="79.1641%" y="277" width="0.0470%" height="15" fill="rgb(224,114,35)" fg:x="10114" fg:w="6"/><text x="79.4141%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.05%)</title><rect x="79.2110%" y="277" width="0.0548%" height="15" fill="rgb(245,159,27)" fg:x="10120" fg:w="7"/><text x="79.4610%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.03%)</title><rect x="79.2658%" y="277" width="0.0313%" height="15" fill="rgb(245,172,44)" fg:x="10127" fg:w="4"/><text x="79.5158%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="79.2971%" y="277" width="0.0235%" height="15" fill="rgb(236,23,11)" fg:x="10131" fg:w="3"/><text x="79.5471%" y="287.50"></text></g><g><title>sf`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="79.3206%" y="277" width="0.0157%" height="15" fill="rgb(205,117,38)" fg:x="10134" fg:w="2"/><text x="79.5706%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (5 samples, 0.04%)</title><rect x="79.4224%" y="261" width="0.0391%" height="15" fill="rgb(237,72,25)" fg:x="10147" fg:w="5"/><text x="79.6724%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (13 samples, 0.10%)</title><rect x="79.4615%" y="261" width="0.1018%" height="15" fill="rgb(244,70,9)" fg:x="10152" fg:w="13"/><text x="79.7115%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (33 samples, 0.26%)</title><rect x="79.9311%" y="245" width="0.2583%" height="15" fill="rgb(217,125,39)" fg:x="10212" fg:w="33"/><text x="80.1811%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.09%)</title><rect x="80.1894%" y="245" width="0.0861%" height="15" fill="rgb(235,36,10)" fg:x="10245" fg:w="11"/><text x="80.4394%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="80.2755%" y="245" width="0.0157%" height="15" fill="rgb(251,123,47)" fg:x="10256" fg:w="2"/><text x="80.5255%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (36 samples, 0.28%)</title><rect x="80.8782%" y="229" width="0.2818%" height="15" fill="rgb(221,13,13)" fg:x="10333" fg:w="36"/><text x="81.1282%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (255 samples, 2.00%)</title><rect x="79.5632%" y="261" width="1.9959%" height="15" fill="rgb(238,131,9)" fg:x="10165" fg:w="255"/><text x="79.8132%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (162 samples, 1.27%)</title><rect x="80.2912%" y="245" width="1.2680%" height="15" fill="rgb(211,50,8)" fg:x="10258" fg:w="162"/><text x="80.5412%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (51 samples, 0.40%)</title><rect x="81.1600%" y="229" width="0.3992%" height="15" fill="rgb(245,182,24)" fg:x="10369" fg:w="51"/><text x="81.4100%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.05%)</title><rect x="81.5592%" y="261" width="0.0470%" height="15" fill="rgb(242,14,37)" fg:x="10420" fg:w="6"/><text x="81.8092%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (31 samples, 0.24%)</title><rect x="81.6061%" y="261" width="0.2426%" height="15" fill="rgb(246,228,12)" fg:x="10426" fg:w="31"/><text x="81.8561%" y="271.50"></text></g><g><title>sf`memmap2::os::MmapInner::map (52 samples, 0.41%)</title><rect x="81.8488%" y="261" width="0.4070%" height="15" fill="rgb(213,55,15)" fg:x="10457" fg:w="52"/><text x="82.0988%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (52 samples, 0.41%)</title><rect x="81.8488%" y="245" width="0.4070%" height="15" fill="rgb(209,9,3)" fg:x="10457" fg:w="52"/><text x="82.0988%" y="255.50"></text></g><g><title>sf`memmap2::os::file_len (10 samples, 0.08%)</title><rect x="82.2558%" y="261" width="0.0783%" height="15" fill="rgb(230,59,30)" fg:x="10509" fg:w="10"/><text x="82.5058%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`fstat (10 samples, 0.08%)</title><rect x="82.2558%" y="245" width="0.0783%" height="15" fill="rgb(209,121,21)" fg:x="10509" fg:w="10"/><text x="82.5058%" y="255.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;safetensors::tensor::SafeTensorError&gt; (3 samples, 0.02%)</title><rect x="82.4906%" y="229" width="0.0235%" height="15" fill="rgb(220,109,13)" fg:x="10539" fg:w="3"/><text x="82.7406%" y="239.50"></text></g><g><title>sf`core::str::converts::from_utf8 (10 samples, 0.08%)</title><rect x="82.5141%" y="229" width="0.0783%" height="15" fill="rgb(232,18,1)" fg:x="10542" fg:w="10"/><text x="82.7641%" y="239.50"></text></g><g><title>sf`safetensors::tensor::Metadata::validate (16 samples, 0.13%)</title><rect x="82.5924%" y="229" width="0.1252%" height="15" fill="rgb(215,41,42)" fg:x="10552" fg:w="16"/><text x="82.8424%" y="239.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;safetensors::tensor::SafeTensorError&gt; (9 samples, 0.07%)</title><rect x="82.6472%" y="213" width="0.0704%" height="15" fill="rgb(224,123,36)" fg:x="10559" fg:w="9"/><text x="82.8972%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.03%)</title><rect x="82.7176%" y="197" width="0.0313%" height="15" fill="rgb(240,125,3)" fg:x="10568" fg:w="4"/><text x="82.9676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="82.7489%" y="197" width="0.0157%" height="15" fill="rgb(205,98,50)" fg:x="10572" fg:w="2"/><text x="82.9989%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="82.7646%" y="197" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="10574" fg:w="2"/><text x="83.0146%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="82.7802%" y="197" width="0.0235%" height="15" fill="rgb(238,207,15)" fg:x="10576" fg:w="3"/><text x="83.0302%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.02%)</title><rect x="82.9446%" y="181" width="0.0157%" height="15" fill="rgb(213,199,42)" fg:x="10597" fg:w="2"/><text x="83.1946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (11 samples, 0.09%)</title><rect x="82.9602%" y="181" width="0.0861%" height="15" fill="rgb(235,201,11)" fg:x="10599" fg:w="11"/><text x="83.2102%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (16 samples, 0.13%)</title><rect x="83.0463%" y="181" width="0.1252%" height="15" fill="rgb(207,46,11)" fg:x="10610" fg:w="16"/><text x="83.2963%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="83.3125%" y="165" width="0.0157%" height="15" fill="rgb(241,35,35)" fg:x="10644" fg:w="2"/><text x="83.5625%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="83.3281%" y="165" width="0.0157%" height="15" fill="rgb(243,32,47)" fg:x="10646" fg:w="2"/><text x="83.5781%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="83.3438%" y="165" width="0.0313%" height="15" fill="rgb(247,202,23)" fg:x="10648" fg:w="4"/><text x="83.5938%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.08%)</title><rect x="83.6725%" y="149" width="0.0783%" height="15" fill="rgb(219,102,11)" fg:x="10690" fg:w="10"/><text x="83.9225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (99 samples, 0.77%)</title><rect x="83.1716%" y="181" width="0.7749%" height="15" fill="rgb(243,110,44)" fg:x="10626" fg:w="99"/><text x="83.4216%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.57%)</title><rect x="83.3751%" y="165" width="0.5714%" height="15" fill="rgb(222,74,54)" fg:x="10652" fg:w="73"/><text x="83.6251%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (25 samples, 0.20%)</title><rect x="83.7508%" y="149" width="0.1957%" height="15" fill="rgb(216,99,12)" fg:x="10700" fg:w="25"/><text x="84.0008%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.03%)</title><rect x="83.9465%" y="181" width="0.0313%" height="15" fill="rgb(226,22,26)" fg:x="10725" fg:w="4"/><text x="84.1965%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="83.9778%" y="181" width="0.0391%" height="15" fill="rgb(217,163,10)" fg:x="10729" fg:w="5"/><text x="84.2278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="84.0639%" y="165" width="0.0235%" height="15" fill="rgb(213,25,53)" fg:x="10740" fg:w="3"/><text x="84.3139%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.11%)</title><rect x="84.0952%" y="165" width="0.1096%" height="15" fill="rgb(252,105,26)" fg:x="10744" fg:w="14"/><text x="84.3452%" y="175.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (12 samples, 0.09%)</title><rect x="84.2048%" y="165" width="0.0939%" height="15" fill="rgb(220,39,43)" fg:x="10758" fg:w="12"/><text x="84.4548%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.04%)</title><rect x="84.3848%" y="133" width="0.0391%" height="15" fill="rgb(229,68,48)" fg:x="10781" fg:w="5"/><text x="84.6348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="84.4552%" y="117" width="0.0157%" height="15" fill="rgb(252,8,32)" fg:x="10790" fg:w="2"/><text x="84.7052%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.02%)</title><rect x="84.6744%" y="101" width="0.0235%" height="15" fill="rgb(223,20,43)" fg:x="10818" fg:w="3"/><text x="84.9244%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.35%)</title><rect x="84.3535%" y="149" width="0.3522%" height="15" fill="rgb(229,81,49)" fg:x="10777" fg:w="45"/><text x="84.6035%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.28%)</title><rect x="84.4239%" y="133" width="0.2818%" height="15" fill="rgb(236,28,36)" fg:x="10786" fg:w="36"/><text x="84.6739%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.23%)</title><rect x="84.4787%" y="117" width="0.2270%" height="15" fill="rgb(249,185,26)" fg:x="10793" fg:w="29"/><text x="84.7287%" y="127.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (53 samples, 0.41%)</title><rect x="84.3065%" y="165" width="0.4148%" height="15" fill="rgb(249,174,33)" fg:x="10771" fg:w="53"/><text x="84.5565%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="84.7057%" y="149" width="0.0157%" height="15" fill="rgb(233,201,37)" fg:x="10822" fg:w="2"/><text x="84.9557%" y="159.50"></text></g><g><title>sf`&lt;safetensors::tensor::_::&lt;impl serde::de::Deserialize for safetensors::tensor::Dtype&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (8 samples, 0.06%)</title><rect x="84.8936%" y="133" width="0.0626%" height="15" fill="rgb(221,78,26)" fg:x="10846" fg:w="8"/><text x="85.1436%" y="143.50"></text></g><g><title>sf`&lt;safetensors::tensor::_::&lt;impl serde::de::Deserialize for safetensors::tensor::Dtype&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (15 samples, 0.12%)</title><rect x="84.8779%" y="149" width="0.1174%" height="15" fill="rgb(250,127,30)" fg:x="10844" fg:w="15"/><text x="85.1279%" y="159.50"></text></g><g><title>sf`&lt;serde::__private::de::content::EnumRefDeserializer&lt;E&gt; as serde::de::EnumAccess&gt;::variant_seed (5 samples, 0.04%)</title><rect x="84.9562%" y="133" width="0.0391%" height="15" fill="rgb(230,49,44)" fg:x="10854" fg:w="5"/><text x="85.2062%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.08%)</title><rect x="85.0266%" y="133" width="0.0783%" height="15" fill="rgb(229,67,23)" fg:x="10863" fg:w="10"/><text x="85.2766%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="85.1049%" y="133" width="0.0235%" height="15" fill="rgb(249,83,47)" fg:x="10873" fg:w="3"/><text x="85.3549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.07%)</title><rect x="85.2614%" y="101" width="0.0704%" height="15" fill="rgb(215,43,3)" fg:x="10893" fg:w="9"/><text x="85.5114%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.02%)</title><rect x="85.3710%" y="85" width="0.0235%" height="15" fill="rgb(238,154,13)" fg:x="10907" fg:w="3"/><text x="85.6210%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="85.4023%" y="85" width="0.0157%" height="15" fill="rgb(219,56,2)" fg:x="10911" fg:w="2"/><text x="85.6523%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.04%)</title><rect x="85.6841%" y="69" width="0.0391%" height="15" fill="rgb(233,0,4)" fg:x="10947" fg:w="5"/><text x="85.9341%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.53%)</title><rect x="85.2145%" y="117" width="0.5322%" height="15" fill="rgb(235,30,7)" fg:x="10887" fg:w="68"/><text x="85.4645%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.41%)</title><rect x="85.3319%" y="101" width="0.4148%" height="15" fill="rgb(250,79,13)" fg:x="10902" fg:w="53"/><text x="85.5819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.33%)</title><rect x="85.4180%" y="85" width="0.3287%" height="15" fill="rgb(211,146,34)" fg:x="10913" fg:w="42"/><text x="85.6680%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="85.7232%" y="69" width="0.0235%" height="15" fill="rgb(228,22,38)" fg:x="10952" fg:w="3"/><text x="85.9732%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="85.7467%" y="117" width="0.0157%" height="15" fill="rgb(235,168,5)" fg:x="10955" fg:w="2"/><text x="85.9967%" y="127.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_seq (105 samples, 0.82%)</title><rect x="85.0031%" y="149" width="0.8219%" height="15" fill="rgb(221,155,16)" fg:x="10860" fg:w="105"/><text x="85.2531%" y="159.50"></text></g><g><title>sf`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (88 samples, 0.69%)</title><rect x="85.1362%" y="133" width="0.6888%" height="15" fill="rgb(215,215,53)" fg:x="10877" fg:w="88"/><text x="85.3862%" y="143.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_u64 (8 samples, 0.06%)</title><rect x="85.7624%" y="117" width="0.0626%" height="15" fill="rgb(223,4,10)" fg:x="10957" fg:w="8"/><text x="86.0124%" y="127.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.09%)</title><rect x="85.8250%" y="149" width="0.0939%" height="15" fill="rgb(234,103,6)" fg:x="10965" fg:w="12"/><text x="86.0750%" y="159.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_u64 (10 samples, 0.08%)</title><rect x="85.8406%" y="133" width="0.0783%" height="15" fill="rgb(227,97,0)" fg:x="10967" fg:w="10"/><text x="86.0906%" y="143.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_struct (156 samples, 1.22%)</title><rect x="84.7214%" y="165" width="1.2210%" height="15" fill="rgb(234,150,53)" fg:x="10824" fg:w="156"/><text x="84.9714%" y="175.50"></text></g><g><title>sf`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.02%)</title><rect x="85.9189%" y="149" width="0.0235%" height="15" fill="rgb(228,201,54)" fg:x="10977" fg:w="3"/><text x="86.1689%" y="159.50"></text></g><g><title>sf`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="85.9502%" y="165" width="0.0157%" height="15" fill="rgb(222,22,37)" fg:x="10981" fg:w="2"/><text x="86.2002%" y="175.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.20%)</title><rect x="86.2398%" y="149" width="0.1957%" height="15" fill="rgb(237,53,32)" fg:x="11018" fg:w="25"/><text x="86.4898%" y="159.50"></text></g><g><title>sf`core::hash::BuildHasher::hash_one (7 samples, 0.05%)</title><rect x="86.4355%" y="149" width="0.0548%" height="15" fill="rgb(233,25,53)" fg:x="11043" fg:w="7"/><text x="86.6855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="86.6077%" y="133" width="0.0157%" height="15" fill="rgb(210,40,34)" fg:x="11065" fg:w="2"/><text x="86.8577%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.02%)</title><rect x="86.6234%" y="133" width="0.0157%" height="15" fill="rgb(241,220,44)" fg:x="11067" fg:w="2"/><text x="86.8734%" y="143.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (107 samples, 0.84%)</title><rect x="86.6547%" y="133" width="0.8375%" height="15" fill="rgb(235,28,35)" fg:x="11071" fg:w="107"/><text x="86.9047%" y="143.50"></text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (215 samples, 1.68%)</title><rect x="85.9737%" y="165" width="1.6828%" height="15" fill="rgb(210,56,17)" fg:x="10984" fg:w="215"/><text x="86.2237%" y="175.50"></text></g><g><title>sf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (149 samples, 1.17%)</title><rect x="86.4903%" y="149" width="1.1662%" height="15" fill="rgb(224,130,29)" fg:x="11050" fg:w="149"/><text x="86.7403%" y="159.50"></text></g><g><title>sf`core::hash::BuildHasher::hash_one (21 samples, 0.16%)</title><rect x="87.4922%" y="133" width="0.1644%" height="15" fill="rgb(235,212,8)" fg:x="11178" fg:w="21"/><text x="87.7422%" y="143.50"></text></g><g><title>sf`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (467 samples, 3.66%)</title><rect x="84.0169%" y="181" width="3.6553%" height="15" fill="rgb(223,33,50)" fg:x="10734" fg:w="467"/><text x="84.2669%" y="191.50">sf`&lt;..</text></g><g><title>sf`serde::de::value::MapDeserializer&lt;I,E&gt;::end (2 samples, 0.02%)</title><rect x="87.6565%" y="165" width="0.0157%" height="15" fill="rgb(219,149,13)" fg:x="11199" fg:w="2"/><text x="87.9065%" y="175.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (3 samples, 0.02%)</title><rect x="87.6722%" y="181" width="0.0235%" height="15" fill="rgb(250,156,29)" fg:x="11201" fg:w="3"/><text x="87.9222%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.02%)</title><rect x="87.6957%" y="181" width="0.0235%" height="15" fill="rgb(216,193,19)" fg:x="11204" fg:w="3"/><text x="87.9457%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.10%)</title><rect x="87.7192%" y="181" width="0.1018%" height="15" fill="rgb(216,135,14)" fg:x="11207" fg:w="13"/><text x="87.9692%" y="191.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (9 samples, 0.07%)</title><rect x="87.8209%" y="181" width="0.0704%" height="15" fill="rgb(241,47,5)" fg:x="11220" fg:w="9"/><text x="88.0709%" y="191.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (52 samples, 0.41%)</title><rect x="87.8914%" y="181" width="0.4070%" height="15" fill="rgb(233,42,35)" fg:x="11229" fg:w="52"/><text x="88.1414%" y="191.50"></text></g><g><title>sf`DYLD-STUB$$free (14 samples, 0.11%)</title><rect x="88.2984%" y="181" width="0.1096%" height="15" fill="rgb(231,13,6)" fg:x="11281" fg:w="14"/><text x="88.5484%" y="191.50"></text></g><g><title>sf`__rdl_dealloc (3 samples, 0.02%)</title><rect x="88.4080%" y="181" width="0.0235%" height="15" fill="rgb(207,181,40)" fg:x="11295" fg:w="3"/><text x="88.6580%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.02%)</title><rect x="88.4471%" y="117" width="0.0157%" height="15" fill="rgb(254,173,49)" fg:x="11300" fg:w="2"/><text x="88.6971%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.05%)</title><rect x="88.4314%" y="133" width="0.0548%" height="15" fill="rgb(221,1,38)" fg:x="11298" fg:w="7"/><text x="88.6814%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="88.4627%" y="117" width="0.0235%" height="15" fill="rgb(206,124,46)" fg:x="11302" fg:w="3"/><text x="88.7127%" y="127.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.06%)</title><rect x="88.4314%" y="181" width="0.0626%" height="15" fill="rgb(249,21,11)" fg:x="11298" fg:w="8"/><text x="88.6814%" y="191.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="88.4314%" y="165" width="0.0626%" height="15" fill="rgb(222,201,40)" fg:x="11298" fg:w="8"/><text x="88.6814%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.06%)</title><rect x="88.4314%" y="149" width="0.0626%" height="15" fill="rgb(235,61,29)" fg:x="11298" fg:w="8"/><text x="88.6814%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (14 samples, 0.11%)</title><rect x="88.6584%" y="165" width="0.1096%" height="15" fill="rgb(219,207,3)" fg:x="11327" fg:w="14"/><text x="88.9084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (7 samples, 0.05%)</title><rect x="89.1750%" y="149" width="0.0548%" height="15" fill="rgb(222,56,46)" fg:x="11393" fg:w="7"/><text x="89.4250%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.06%)</title><rect x="89.2298%" y="149" width="0.0626%" height="15" fill="rgb(239,76,54)" fg:x="11400" fg:w="8"/><text x="89.4798%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.15%)</title><rect x="89.6133%" y="133" width="0.1487%" height="15" fill="rgb(231,124,27)" fg:x="11449" fg:w="19"/><text x="89.8633%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (142 samples, 1.11%)</title><rect x="88.7680%" y="165" width="1.1115%" height="15" fill="rgb(249,195,6)" fg:x="11341" fg:w="142"/><text x="89.0180%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (74 samples, 0.58%)</title><rect x="89.3003%" y="149" width="0.5792%" height="15" fill="rgb(237,174,47)" fg:x="11409" fg:w="74"/><text x="89.5503%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.12%)</title><rect x="89.7621%" y="133" width="0.1174%" height="15" fill="rgb(206,201,31)" fg:x="11468" fg:w="15"/><text x="90.0121%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (16 samples, 0.13%)</title><rect x="89.8873%" y="165" width="0.1252%" height="15" fill="rgb(231,57,52)" fg:x="11484" fg:w="16"/><text x="90.1373%" y="175.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (257 samples, 2.01%)</title><rect x="88.4941%" y="181" width="2.0116%" height="15" fill="rgb(248,177,22)" fg:x="11306" fg:w="257"/><text x="88.7441%" y="191.50">s..</text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (63 samples, 0.49%)</title><rect x="90.0125%" y="165" width="0.4931%" height="15" fill="rgb(215,211,37)" fg:x="11500" fg:w="63"/><text x="90.2625%" y="175.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (7 samples, 0.05%)</title><rect x="90.4508%" y="149" width="0.0548%" height="15" fill="rgb(241,128,51)" fg:x="11556" fg:w="7"/><text x="90.7008%" y="159.50"></text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.03%)</title><rect x="90.5056%" y="181" width="0.0313%" height="15" fill="rgb(227,165,31)" fg:x="11563" fg:w="4"/><text x="90.7556%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (5 samples, 0.04%)</title><rect x="91.2649%" y="149" width="0.0391%" height="15" fill="rgb(228,167,24)" fg:x="11660" fg:w="5"/><text x="91.5149%" y="159.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (17 samples, 0.13%)</title><rect x="91.3040%" y="149" width="0.1331%" height="15" fill="rgb(228,143,12)" fg:x="11665" fg:w="17"/><text x="91.5540%" y="159.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (6 samples, 0.05%)</title><rect x="91.4371%" y="149" width="0.0470%" height="15" fill="rgb(249,149,8)" fg:x="11682" fg:w="6"/><text x="91.6871%" y="159.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (34 samples, 0.27%)</title><rect x="91.4840%" y="133" width="0.2661%" height="15" fill="rgb(243,35,44)" fg:x="11688" fg:w="34"/><text x="91.7340%" y="143.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (70 samples, 0.55%)</title><rect x="91.4840%" y="149" width="0.5479%" height="15" fill="rgb(246,89,9)" fg:x="11688" fg:w="70"/><text x="91.7340%" y="159.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (36 samples, 0.28%)</title><rect x="91.7502%" y="133" width="0.2818%" height="15" fill="rgb(233,213,13)" fg:x="11722" fg:w="36"/><text x="92.0002%" y="143.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (12 samples, 0.09%)</title><rect x="92.0319%" y="149" width="0.0939%" height="15" fill="rgb(233,141,41)" fg:x="11758" fg:w="12"/><text x="92.2819%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.04%)</title><rect x="92.2433%" y="133" width="0.0391%" height="15" fill="rgb(239,167,4)" fg:x="11785" fg:w="5"/><text x="92.4933%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="92.3763%" y="101" width="0.0157%" height="15" fill="rgb(209,217,16)" fg:x="11802" fg:w="2"/><text x="92.6263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="92.3920%" y="101" width="0.0235%" height="15" fill="rgb(219,88,35)" fg:x="11804" fg:w="3"/><text x="92.6420%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="92.4859%" y="85" width="0.0157%" height="15" fill="rgb(220,193,23)" fg:x="11816" fg:w="2"/><text x="92.7359%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.05%)</title><rect x="92.5016%" y="85" width="0.0470%" height="15" fill="rgb(230,90,52)" fg:x="11818" fg:w="6"/><text x="92.7516%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (56 samples, 0.44%)</title><rect x="92.3215%" y="117" width="0.4383%" height="15" fill="rgb(252,106,19)" fg:x="11795" fg:w="56"/><text x="92.5715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (44 samples, 0.34%)</title><rect x="92.4155%" y="101" width="0.3444%" height="15" fill="rgb(206,74,20)" fg:x="11807" fg:w="44"/><text x="92.6655%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.21%)</title><rect x="92.5485%" y="85" width="0.2113%" height="15" fill="rgb(230,138,44)" fg:x="11824" fg:w="27"/><text x="92.7985%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (6 samples, 0.05%)</title><rect x="92.7129%" y="69" width="0.0470%" height="15" fill="rgb(235,182,43)" fg:x="11845" fg:w="6"/><text x="92.9629%" y="79.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (82 samples, 0.64%)</title><rect x="92.1259%" y="149" width="0.6418%" height="15" fill="rgb(242,16,51)" fg:x="11770" fg:w="82"/><text x="92.3759%" y="159.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (62 samples, 0.49%)</title><rect x="92.2824%" y="133" width="0.4853%" height="15" fill="rgb(248,9,4)" fg:x="11790" fg:w="62"/><text x="92.5324%" y="143.50"></text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::parse_integer (102 samples, 0.80%)</title><rect x="94.3644%" y="85" width="0.7984%" height="15" fill="rgb(210,31,22)" fg:x="12056" fg:w="102"/><text x="94.6144%" y="95.50"></text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (159 samples, 1.24%)</title><rect x="94.0592%" y="101" width="1.2445%" height="15" fill="rgb(239,54,39)" fg:x="12017" fg:w="159"/><text x="94.3092%" y="111.50"></text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::parse_number (18 samples, 0.14%)</title><rect x="95.1628%" y="85" width="0.1409%" height="15" fill="rgb(230,99,41)" fg:x="12158" fg:w="18"/><text x="95.4128%" y="95.50"></text></g><g><title>sf`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (232 samples, 1.82%)</title><rect x="93.4956%" y="117" width="1.8159%" height="15" fill="rgb(253,106,12)" fg:x="11945" fg:w="232"/><text x="93.7456%" y="127.50">s..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.12%)</title><rect x="95.4133%" y="101" width="0.1174%" height="15" fill="rgb(213,46,41)" fg:x="12190" fg:w="15"/><text x="95.6633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="95.5307%" y="101" width="0.0235%" height="15" fill="rgb(215,133,35)" fg:x="12205" fg:w="3"/><text x="95.7807%" y="111.50"></text></g><g><title>sf`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="95.5542%" y="101" width="0.0235%" height="15" fill="rgb(213,28,5)" fg:x="12208" fg:w="3"/><text x="95.8042%" y="111.50"></text></g><g><title>sf`__rdl_alloc (4 samples, 0.03%)</title><rect x="95.5776%" y="101" width="0.0313%" height="15" fill="rgb(215,77,49)" fg:x="12211" fg:w="4"/><text x="95.8276%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (8 samples, 0.06%)</title><rect x="95.7812%" y="69" width="0.0626%" height="15" fill="rgb(248,100,22)" fg:x="12237" fg:w="8"/><text x="96.0312%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="95.8438%" y="69" width="0.0548%" height="15" fill="rgb(208,67,9)" fg:x="12245" fg:w="7"/><text x="96.0938%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.25%)</title><rect x="96.0003%" y="53" width="0.2505%" height="15" fill="rgb(219,133,21)" fg:x="12265" fg:w="32"/><text x="96.2503%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.04%)</title><rect x="96.5795%" y="37" width="0.0391%" height="15" fill="rgb(246,46,29)" fg:x="12339" fg:w="5"/><text x="96.8295%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (123 samples, 0.96%)</title><rect x="95.6637%" y="85" width="0.9627%" height="15" fill="rgb(246,185,52)" fg:x="12222" fg:w="123"/><text x="95.9137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (93 samples, 0.73%)</title><rect x="95.8986%" y="69" width="0.7279%" height="15" fill="rgb(252,136,11)" fg:x="12252" fg:w="93"/><text x="96.1486%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (48 samples, 0.38%)</title><rect x="96.2508%" y="53" width="0.3757%" height="15" fill="rgb(219,138,53)" fg:x="12297" fg:w="48"/><text x="96.5008%" y="63.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (170 samples, 1.33%)</title><rect x="95.3115%" y="117" width="1.3306%" height="15" fill="rgb(211,51,23)" fg:x="12177" fg:w="170"/><text x="95.5615%" y="127.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (132 samples, 1.03%)</title><rect x="95.6090%" y="101" width="1.0332%" height="15" fill="rgb(247,221,28)" fg:x="12215" fg:w="132"/><text x="95.8590%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="96.6265%" y="85" width="0.0157%" height="15" fill="rgb(251,222,45)" fg:x="12345" fg:w="2"/><text x="96.8765%" y="95.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="96.6421%" y="117" width="0.0157%" height="15" fill="rgb(217,162,53)" fg:x="12347" fg:w="2"/><text x="96.8921%" y="127.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (450 samples, 3.52%)</title><rect x="93.1904%" y="133" width="3.5222%" height="15" fill="rgb(229,93,14)" fg:x="11906" fg:w="450"/><text x="93.4404%" y="143.50">sf`..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (7 samples, 0.05%)</title><rect x="96.6578%" y="117" width="0.0548%" height="15" fill="rgb(209,67,49)" fg:x="12349" fg:w="7"/><text x="96.9078%" y="127.50"></text></g><g><title>sf`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (14 samples, 0.11%)</title><rect x="96.7126%" y="133" width="0.1096%" height="15" fill="rgb(213,87,29)" fg:x="12356" fg:w="14"/><text x="96.9626%" y="143.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (15 samples, 0.12%)</title><rect x="96.8222%" y="133" width="0.1174%" height="15" fill="rgb(205,151,52)" fg:x="12370" fg:w="15"/><text x="97.0722%" y="143.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (809 samples, 6.33%)</title><rect x="90.6465%" y="165" width="6.3322%" height="15" fill="rgb(253,215,39)" fg:x="11581" fg:w="809"/><text x="90.8965%" y="175.50">sf`&lt;serd..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (538 samples, 4.21%)</title><rect x="92.7677%" y="149" width="4.2110%" height="15" fill="rgb(221,220,41)" fg:x="11852" fg:w="538"/><text x="93.0177%" y="159.50">sf`se..</text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.04%)</title><rect x="96.9396%" y="133" width="0.0391%" height="15" fill="rgb(218,133,21)" fg:x="12385" fg:w="5"/><text x="97.1896%" y="143.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (25 samples, 0.20%)</title><rect x="96.9787%" y="165" width="0.1957%" height="15" fill="rgb(221,193,43)" fg:x="12390" fg:w="25"/><text x="97.2287%" y="175.50"></text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (11 samples, 0.09%)</title><rect x="97.1744%" y="165" width="0.0861%" height="15" fill="rgb(240,128,52)" fg:x="12415" fg:w="11"/><text x="97.4244%" y="175.50"></text></g><g><title>sf`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1,849 samples, 14.47%)</title><rect x="82.8037%" y="197" width="14.4724%" height="15" fill="rgb(253,114,12)" fg:x="10579" fg:w="1849"/><text x="83.0537%" y="207.50">sf`&lt;&amp;mut serde_json::d..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (861 samples, 6.74%)</title><rect x="90.5369%" y="181" width="6.7392%" height="15" fill="rgb(215,223,47)" fg:x="11567" fg:w="861"/><text x="90.7869%" y="191.50">sf`serde:..</text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::end_map (2 samples, 0.02%)</title><rect x="97.2605%" y="165" width="0.0157%" height="15" fill="rgb(248,225,23)" fg:x="12426" fg:w="2"/><text x="97.5105%" y="175.50"></text></g><g><title>sf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.19%)</title><rect x="97.2761%" y="197" width="0.1879%" height="15" fill="rgb(250,108,0)" fg:x="12428" fg:w="24"/><text x="97.5261%" y="207.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (3 samples, 0.02%)</title><rect x="97.4640%" y="197" width="0.0235%" height="15" fill="rgb(228,208,7)" fg:x="12452" fg:w="3"/><text x="97.7140%" y="207.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.02%)</title><rect x="97.4875%" y="197" width="0.0235%" height="15" fill="rgb(244,45,10)" fg:x="12455" fg:w="3"/><text x="97.7375%" y="207.50"></text></g><g><title>sf`DYLD-STUB$$free (6 samples, 0.05%)</title><rect x="97.5110%" y="197" width="0.0470%" height="15" fill="rgb(207,125,25)" fg:x="12458" fg:w="6"/><text x="97.7610%" y="207.50"></text></g><g><title>sf`DYLD-STUB$$memmove (5 samples, 0.04%)</title><rect x="97.5579%" y="197" width="0.0391%" height="15" fill="rgb(210,195,18)" fg:x="12464" fg:w="5"/><text x="97.8079%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="97.6205%" y="165" width="0.0157%" height="15" fill="rgb(249,80,12)" fg:x="12472" fg:w="2"/><text x="97.8705%" y="175.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (6 samples, 0.05%)</title><rect x="97.7536%" y="149" width="0.0470%" height="15" fill="rgb(221,65,9)" fg:x="12489" fg:w="6"/><text x="98.0036%" y="159.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (15 samples, 0.12%)</title><rect x="97.8319%" y="133" width="0.1174%" height="15" fill="rgb(235,49,36)" fg:x="12499" fg:w="15"/><text x="98.0819%" y="143.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (17 samples, 0.13%)</title><rect x="97.9571%" y="117" width="0.1331%" height="15" fill="rgb(225,32,20)" fg:x="12515" fg:w="17"/><text x="98.2071%" y="127.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.02%)</title><rect x="98.0902%" y="101" width="0.0235%" height="15" fill="rgb(215,141,46)" fg:x="12532" fg:w="3"/><text x="98.3402%" y="111.50"></text></g><g><title>sf`core::slice::sort::stable::driftsort_main (67 samples, 0.52%)</title><rect x="97.6049%" y="197" width="0.5244%" height="15" fill="rgb(250,160,47)" fg:x="12470" fg:w="67"/><text x="97.8549%" y="207.50"></text></g><g><title>sf`core::slice::sort::stable::drift::sort (66 samples, 0.52%)</title><rect x="97.6127%" y="181" width="0.5166%" height="15" fill="rgb(216,222,40)" fg:x="12471" fg:w="66"/><text x="97.8627%" y="191.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (63 samples, 0.49%)</title><rect x="97.6362%" y="165" width="0.4931%" height="15" fill="rgb(234,217,39)" fg:x="12474" fg:w="63"/><text x="97.8862%" y="175.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (42 samples, 0.33%)</title><rect x="97.8006%" y="149" width="0.3287%" height="15" fill="rgb(207,178,40)" fg:x="12495" fg:w="42"/><text x="98.0506%" y="159.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (23 samples, 0.18%)</title><rect x="97.9493%" y="133" width="0.1800%" height="15" fill="rgb(221,136,13)" fg:x="12514" fg:w="23"/><text x="98.1993%" y="143.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.04%)</title><rect x="98.0902%" y="117" width="0.0391%" height="15" fill="rgb(249,199,10)" fg:x="12532" fg:w="5"/><text x="98.3402%" y="127.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="98.1137%" y="101" width="0.0157%" height="15" fill="rgb(249,222,13)" fg:x="12535" fg:w="2"/><text x="98.3637%" y="111.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.02%)</title><rect x="98.1137%" y="85" width="0.0157%" height="15" fill="rgb(244,185,38)" fg:x="12535" fg:w="2"/><text x="98.3637%" y="95.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.19%)</title><rect x="98.3172%" y="133" width="0.1879%" height="15" fill="rgb(236,202,9)" fg:x="12561" fg:w="24"/><text x="98.5672%" y="143.50"></text></g><g><title>sf`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (64 samples, 0.50%)</title><rect x="98.1293%" y="165" width="0.5009%" height="15" fill="rgb(250,229,37)" fg:x="12537" fg:w="64"/><text x="98.3793%" y="175.50"></text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (56 samples, 0.44%)</title><rect x="98.1919%" y="149" width="0.4383%" height="15" fill="rgb(206,174,23)" fg:x="12545" fg:w="56"/><text x="98.4419%" y="159.50"></text></g><g><title>sf`core::hash::BuildHasher::hash_one (16 samples, 0.13%)</title><rect x="98.5050%" y="133" width="0.1252%" height="15" fill="rgb(211,33,43)" fg:x="12585" fg:w="16"/><text x="98.7550%" y="143.50"></text></g><g><title>sf`alloc::vec::in_place_collect::from_iter_in_place (73 samples, 0.57%)</title><rect x="98.1293%" y="181" width="0.5714%" height="15" fill="rgb(245,58,50)" fg:x="12537" fg:w="73"/><text x="98.3793%" y="191.50"></text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.07%)</title><rect x="98.6302%" y="165" width="0.0704%" height="15" fill="rgb(244,68,36)" fg:x="12601" fg:w="9"/><text x="98.8802%" y="175.50"></text></g><g><title>sf`safetensors::tensor::Metadata::new (74 samples, 0.58%)</title><rect x="98.1293%" y="197" width="0.5792%" height="15" fill="rgb(232,229,15)" fg:x="12537" fg:w="74"/><text x="98.3793%" y="207.50"></text></g><g><title>sf`safetensors::tensor::SafeTensors::deserialize (2,094 samples, 16.39%)</title><rect x="82.3341%" y="261" width="16.3901%" height="15" fill="rgb(254,30,23)" fg:x="10519" fg:w="2094"/><text x="82.5841%" y="271.50">sf`safetensors::tensor::S..</text></g><g><title>sf`safetensors::tensor::SafeTensors::read_metadata (2,094 samples, 16.39%)</title><rect x="82.3341%" y="245" width="16.3901%" height="15" fill="rgb(235,160,14)" fg:x="10519" fg:w="2094"/><text x="82.5841%" y="255.50">sf`safetensors::tensor::S..</text></g><g><title>sf`serde_json::de::from_trait (2,045 samples, 16.01%)</title><rect x="82.7176%" y="229" width="16.0066%" height="15" fill="rgb(212,155,44)" fg:x="10568" fg:w="2045"/><text x="82.9676%" y="239.50">sf`serde_json::de::from_t..</text></g><g><title>sf`&lt;safetensors::tensor::Metadata as serde::de::Deserialize&gt;::deserialize (2,045 samples, 16.01%)</title><rect x="82.7176%" y="213" width="16.0066%" height="15" fill="rgb(226,2,50)" fg:x="10568" fg:w="2045"/><text x="82.9676%" y="223.50">sf`&lt;safetensors::tensor::..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (2 samples, 0.02%)</title><rect x="98.7085%" y="197" width="0.0157%" height="15" fill="rgb(234,177,6)" fg:x="12611" fg:w="2"/><text x="98.9585%" y="207.50"></text></g><g><title>dyld`start (12,775 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9922%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="12775"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>sf`main (2,905 samples, 22.74%)</title><rect x="77.2542%" y="341" width="22.7379%" height="15" fill="rgb(220,13,46)" fg:x="9870" fg:w="2905"/><text x="77.5042%" y="351.50">sf`main</text></g><g><title>sf`std::rt::lang_start_internal (2,905 samples, 22.74%)</title><rect x="77.2542%" y="325" width="22.7379%" height="15" fill="rgb(239,221,27)" fg:x="9870" fg:w="2905"/><text x="77.5042%" y="335.50">sf`std::rt::lang_start_internal</text></g><g><title>sf`std::rt::lang_start::_{{closure}} (2,905 samples, 22.74%)</title><rect x="77.2542%" y="309" width="22.7379%" height="15" fill="rgb(222,198,25)" fg:x="9870" fg:w="2905"/><text x="77.5042%" y="319.50">sf`std::rt::lang_start::_{{closure}}</text></g><g><title>sf`std::sys::backtrace::__rust_begin_short_backtrace (2,905 samples, 22.74%)</title><rect x="77.2542%" y="293" width="22.7379%" height="15" fill="rgb(211,99,13)" fg:x="9870" fg:w="2905"/><text x="77.5042%" y="303.50">sf`std::sys::backtrace::__rust_begin..</text></g><g><title>sf`sf::main (2,638 samples, 20.65%)</title><rect x="79.3441%" y="277" width="20.6481%" height="15" fill="rgb(232,111,31)" fg:x="10137" fg:w="2638"/><text x="79.5941%" y="287.50">sf`sf::main</text></g><g><title>sf`std::fs::OpenOptions::_open (162 samples, 1.27%)</title><rect x="98.7242%" y="261" width="1.2680%" height="15" fill="rgb(245,82,37)" fg:x="12613" fg:w="162"/><text x="98.9742%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__open (162 samples, 1.27%)</title><rect x="98.7242%" y="245" width="1.2680%" height="15" fill="rgb(227,149,46)" fg:x="12613" fg:w="162"/><text x="98.9742%" y="255.50"></text></g><g><title>all (12,776 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="12776"/><text x="0.2500%" y="383.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="474"><g><title>libsystem_kernel.dylib`__munmap (47 samples, 9.92%)</title><rect x="0.0000%" y="325" width="9.9156%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="47"/><text x="0.2500%" y="335.50">libsystem_kern..</text></g><g><title>libsystem_kernel.dylib`close (4 samples, 0.84%)</title><rect x="9.9156%" y="325" width="0.8439%" height="15" fill="rgb(217,0,24)" fg:x="47" fg:w="4"/><text x="10.1656%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.42%)</title><rect x="10.7595%" y="325" width="0.4219%" height="15" fill="rgb(221,193,54)" fg:x="51" fg:w="2"/><text x="11.0095%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.42%)</title><rect x="11.1814%" y="325" width="0.4219%" height="15" fill="rgb(248,212,6)" fg:x="53" fg:w="2"/><text x="11.4314%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.21%)</title><rect x="11.6034%" y="325" width="0.2110%" height="15" fill="rgb(208,68,35)" fg:x="55" fg:w="1"/><text x="11.8534%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.21%)</title><rect x="12.4473%" y="309" width="0.2110%" height="15" fill="rgb(232,128,0)" fg:x="59" fg:w="1"/><text x="12.6973%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.21%)</title><rect x="12.6582%" y="309" width="0.2110%" height="15" fill="rgb(207,160,47)" fg:x="60" fg:w="1"/><text x="12.9082%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.42%)</title><rect x="13.7131%" y="293" width="0.4219%" height="15" fill="rgb(228,23,34)" fg:x="65" fg:w="2"/><text x="13.9631%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.42%)</title><rect x="14.1350%" y="293" width="0.4219%" height="15" fill="rgb(218,30,26)" fg:x="67" fg:w="2"/><text x="14.3850%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 1.05%)</title><rect x="16.2447%" y="277" width="1.0549%" height="15" fill="rgb(220,122,19)" fg:x="77" fg:w="5"/><text x="16.4947%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 6.12%)</title><rect x="12.8692%" y="309" width="6.1181%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="29"/><text x="13.1192%" y="319.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (21 samples, 4.43%)</title><rect x="14.5570%" y="293" width="4.4304%" height="15" fill="rgb(240,193,28)" fg:x="69" fg:w="21"/><text x="14.8070%" y="303.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 1.69%)</title><rect x="17.2996%" y="277" width="1.6878%" height="15" fill="rgb(216,20,37)" fg:x="82" fg:w="8"/><text x="17.5496%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.21%)</title><rect x="18.9873%" y="309" width="0.2110%" height="15" fill="rgb(206,188,39)" fg:x="90" fg:w="1"/><text x="19.2373%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 1.69%)</title><rect x="19.1983%" y="309" width="1.6878%" height="15" fill="rgb(217,207,13)" fg:x="91" fg:w="8"/><text x="19.4483%" y="319.50"></text></g><g><title>sf`memmap2::os::MmapInner::map (7 samples, 1.48%)</title><rect x="20.8861%" y="309" width="1.4768%" height="15" fill="rgb(231,73,38)" fg:x="99" fg:w="7"/><text x="21.1361%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (7 samples, 1.48%)</title><rect x="20.8861%" y="293" width="1.4768%" height="15" fill="rgb(225,20,46)" fg:x="99" fg:w="7"/><text x="21.1361%" y="303.50"></text></g><g><title>sf`memmap2::os::file_len (2 samples, 0.42%)</title><rect x="22.3629%" y="309" width="0.4219%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="2"/><text x="22.6129%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`fstat (2 samples, 0.42%)</title><rect x="22.3629%" y="293" width="0.4219%" height="15" fill="rgb(221,200,47)" fg:x="106" fg:w="2"/><text x="22.6129%" y="303.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;safetensors::tensor::SafeTensorError&gt; (1 samples, 0.21%)</title><rect x="23.4177%" y="277" width="0.2110%" height="15" fill="rgb(226,26,5)" fg:x="111" fg:w="1"/><text x="23.6677%" y="287.50"></text></g><g><title>sf`core::str::converts::from_utf8 (2 samples, 0.42%)</title><rect x="23.6287%" y="277" width="0.4219%" height="15" fill="rgb(249,33,26)" fg:x="112" fg:w="2"/><text x="23.8787%" y="287.50"></text></g><g><title>sf`safetensors::tensor::Metadata::validate (5 samples, 1.05%)</title><rect x="24.0506%" y="277" width="1.0549%" height="15" fill="rgb(235,183,28)" fg:x="114" fg:w="5"/><text x="24.3006%" y="287.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;safetensors::tensor::SafeTensorError&gt; (3 samples, 0.63%)</title><rect x="24.4726%" y="261" width="0.6329%" height="15" fill="rgb(221,5,38)" fg:x="116" fg:w="3"/><text x="24.7226%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.21%)</title><rect x="25.1055%" y="245" width="0.2110%" height="15" fill="rgb(247,18,42)" fg:x="119" fg:w="1"/><text x="25.3555%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.21%)</title><rect x="25.1055%" y="229" width="0.2110%" height="15" fill="rgb(241,131,45)" fg:x="119" fg:w="1"/><text x="25.3555%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.21%)</title><rect x="25.3165%" y="245" width="0.2110%" height="15" fill="rgb(249,31,29)" fg:x="120" fg:w="1"/><text x="25.5665%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.21%)</title><rect x="25.9494%" y="229" width="0.2110%" height="15" fill="rgb(225,111,53)" fg:x="123" fg:w="1"/><text x="26.1994%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.21%)</title><rect x="26.1603%" y="229" width="0.2110%" height="15" fill="rgb(238,160,17)" fg:x="124" fg:w="1"/><text x="26.4103%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.21%)</title><rect x="27.2152%" y="213" width="0.2110%" height="15" fill="rgb(214,148,48)" fg:x="129" fg:w="1"/><text x="27.4652%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.21%)</title><rect x="27.4262%" y="213" width="0.2110%" height="15" fill="rgb(232,36,49)" fg:x="130" fg:w="1"/><text x="27.6762%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.42%)</title><rect x="29.3249%" y="197" width="0.4219%" height="15" fill="rgb(209,103,24)" fg:x="139" fg:w="2"/><text x="29.5749%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 4.43%)</title><rect x="26.3713%" y="229" width="4.4304%" height="15" fill="rgb(229,88,8)" fg:x="125" fg:w="21"/><text x="26.6213%" y="239.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 3.16%)</title><rect x="27.6371%" y="213" width="3.1646%" height="15" fill="rgb(213,181,19)" fg:x="131" fg:w="15"/><text x="27.8871%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 1.05%)</title><rect x="29.7468%" y="197" width="1.0549%" height="15" fill="rgb(254,191,54)" fg:x="141" fg:w="5"/><text x="29.9968%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.42%)</title><rect x="30.8017%" y="229" width="0.4219%" height="15" fill="rgb(241,83,37)" fg:x="146" fg:w="2"/><text x="31.0517%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.42%)</title><rect x="31.2236%" y="213" width="0.4219%" height="15" fill="rgb(233,36,39)" fg:x="148" fg:w="2"/><text x="31.4736%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.21%)</title><rect x="31.6456%" y="213" width="0.2110%" height="15" fill="rgb(226,3,54)" fg:x="150" fg:w="1"/><text x="31.8956%" y="223.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_identifier (5 samples, 1.05%)</title><rect x="31.8565%" y="213" width="1.0549%" height="15" fill="rgb(245,192,40)" fg:x="151" fg:w="5"/><text x="32.1065%" y="223.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.21%)</title><rect x="32.9114%" y="213" width="0.2110%" height="15" fill="rgb(238,167,29)" fg:x="156" fg:w="1"/><text x="33.1614%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.42%)</title><rect x="33.3333%" y="181" width="0.4219%" height="15" fill="rgb(232,182,51)" fg:x="158" fg:w="2"/><text x="33.5833%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (9 samples, 1.90%)</title><rect x="33.1224%" y="213" width="1.8987%" height="15" fill="rgb(231,60,39)" fg:x="157" fg:w="9"/><text x="33.3724%" y="223.50">s..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 1.69%)</title><rect x="33.3333%" y="197" width="1.6878%" height="15" fill="rgb(208,69,12)" fg:x="158" fg:w="8"/><text x="33.5833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 1.27%)</title><rect x="33.7553%" y="181" width="1.2658%" height="15" fill="rgb(235,93,37)" fg:x="160" fg:w="6"/><text x="34.0053%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 1.05%)</title><rect x="33.9662%" y="165" width="1.0549%" height="15" fill="rgb(213,116,39)" fg:x="161" fg:w="5"/><text x="34.2162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="34.8101%" y="149" width="0.2110%" height="15" fill="rgb(222,207,29)" fg:x="165" fg:w="1"/><text x="35.0601%" y="159.50"></text></g><g><title>sf`&lt;safetensors::tensor::_::&lt;impl serde::de::Deserialize for safetensors::tensor::Dtype&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (3 samples, 0.63%)</title><rect x="36.4979%" y="197" width="0.6329%" height="15" fill="rgb(206,96,30)" fg:x="173" fg:w="3"/><text x="36.7479%" y="207.50"></text></g><g><title>sf`&lt;safetensors::tensor::_::&lt;impl serde::de::Deserialize for safetensors::tensor::Dtype&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.42%)</title><rect x="36.7089%" y="181" width="0.4219%" height="15" fill="rgb(218,138,4)" fg:x="174" fg:w="2"/><text x="36.9589%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.21%)</title><rect x="37.7637%" y="149" width="0.2110%" height="15" fill="rgb(250,191,14)" fg:x="179" fg:w="1"/><text x="38.0137%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.21%)</title><rect x="37.9747%" y="149" width="0.2110%" height="15" fill="rgb(239,60,40)" fg:x="180" fg:w="1"/><text x="38.2247%" y="159.50"></text></g><g><title>11  30783                         :tick-5s (1 samples, 0.21%)</title><rect x="39.2405%" y="117" width="0.2110%" height="15" fill="rgb(206,27,48)" fg:x="186" fg:w="1"/><text x="39.4905%" y="127.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.21%)</title><rect x="39.2405%" y="101" width="0.2110%" height="15" fill="rgb(225,35,8)" fg:x="186" fg:w="1"/><text x="39.4905%" y="111.50"></text></g><g><title>13  30783                         :tick-5s (1 samples, 0.21%)</title><rect x="39.2405%" y="85" width="0.2110%" height="15" fill="rgb(250,213,24)" fg:x="186" fg:w="1"/><text x="39.4905%" y="95.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.21%)</title><rect x="39.2405%" y="69" width="0.2110%" height="15" fill="rgb(247,123,22)" fg:x="186" fg:w="1"/><text x="39.4905%" y="79.50"></text></g><g><title>12  30783                         :tick-5s (1 samples, 0.21%)</title><rect x="39.2405%" y="53" width="0.2110%" height="15" fill="rgb(231,138,38)" fg:x="186" fg:w="1"/><text x="39.4905%" y="63.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.21%)</title><rect x="39.2405%" y="37" width="0.2110%" height="15" fill="rgb(231,145,46)" fg:x="186" fg:w="1"/><text x="39.4905%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 2.11%)</title><rect x="37.5527%" y="165" width="2.1097%" height="15" fill="rgb(251,118,11)" fg:x="178" fg:w="10"/><text x="37.8027%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 1.48%)</title><rect x="38.1857%" y="149" width="1.4768%" height="15" fill="rgb(217,147,25)" fg:x="181" fg:w="7"/><text x="38.4357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 1.27%)</title><rect x="38.3966%" y="133" width="1.2658%" height="15" fill="rgb(247,81,37)" fg:x="182" fg:w="6"/><text x="38.6466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="39.4515%" y="117" width="0.2110%" height="15" fill="rgb(209,12,38)" fg:x="187" fg:w="1"/><text x="39.7015%" y="127.50"></text></g><g><title>sf`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (12 samples, 2.53%)</title><rect x="37.3418%" y="181" width="2.5316%" height="15" fill="rgb(227,1,9)" fg:x="177" fg:w="12"/><text x="37.5918%" y="191.50">sf..</text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_u64 (1 samples, 0.21%)</title><rect x="39.6624%" y="165" width="0.2110%" height="15" fill="rgb(248,47,43)" fg:x="188" fg:w="1"/><text x="39.9124%" y="175.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_seq (14 samples, 2.95%)</title><rect x="37.1308%" y="197" width="2.9536%" height="15" fill="rgb(221,10,30)" fg:x="176" fg:w="14"/><text x="37.3808%" y="207.50">sf`..</text></g><g><title>sf`DYLD-STUB$$malloc (1 samples, 0.21%)</title><rect x="39.8734%" y="181" width="0.2110%" height="15" fill="rgb(210,229,1)" fg:x="189" fg:w="1"/><text x="40.1234%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_tuple (1 samples, 0.21%)</title><rect x="40.0844%" y="197" width="0.2110%" height="15" fill="rgb(222,148,37)" fg:x="190" fg:w="1"/><text x="40.3344%" y="207.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_u64 (1 samples, 0.21%)</title><rect x="40.0844%" y="181" width="0.2110%" height="15" fill="rgb(234,67,33)" fg:x="190" fg:w="1"/><text x="40.3344%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_struct (26 samples, 5.49%)</title><rect x="35.0211%" y="213" width="5.4852%" height="15" fill="rgb(247,98,35)" fg:x="166" fg:w="26"/><text x="35.2711%" y="223.50">sf`&lt;ser..</text></g><g><title>sf`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.21%)</title><rect x="40.2954%" y="197" width="0.2110%" height="15" fill="rgb(247,138,52)" fg:x="191" fg:w="1"/><text x="40.5454%" y="207.50"></text></g><g><title>sf`DYLD-STUB$$malloc (1 samples, 0.21%)</title><rect x="40.5063%" y="213" width="0.2110%" height="15" fill="rgb(213,79,30)" fg:x="192" fg:w="1"/><text x="40.7563%" y="223.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.21%)</title><rect x="41.1392%" y="197" width="0.2110%" height="15" fill="rgb(246,177,23)" fg:x="195" fg:w="1"/><text x="41.3892%" y="207.50"></text></g><g><title>sf`core::hash::BuildHasher::hash_one (2 samples, 0.42%)</title><rect x="41.3502%" y="197" width="0.4219%" height="15" fill="rgb(230,62,27)" fg:x="196" fg:w="2"/><text x="41.6002%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.21%)</title><rect x="41.7722%" y="181" width="0.2110%" height="15" fill="rgb(216,154,8)" fg:x="198" fg:w="1"/><text x="42.0222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.21%)</title><rect x="41.9831%" y="181" width="0.2110%" height="15" fill="rgb(244,35,45)" fg:x="199" fg:w="1"/><text x="42.2331%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.21%)</title><rect x="42.1941%" y="181" width="0.2110%" height="15" fill="rgb(251,115,12)" fg:x="200" fg:w="1"/><text x="42.4441%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.21%)</title><rect x="42.4051%" y="181" width="0.2110%" height="15" fill="rgb(240,54,50)" fg:x="201" fg:w="1"/><text x="42.6551%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.21%)</title><rect x="42.4051%" y="165" width="0.2110%" height="15" fill="rgb(233,84,52)" fg:x="201" fg:w="1"/><text x="42.6551%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.21%)</title><rect x="42.4051%" y="149" width="0.2110%" height="15" fill="rgb(207,117,47)" fg:x="201" fg:w="1"/><text x="42.6551%" y="159.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 3.59%)</title><rect x="42.6160%" y="181" width="3.5865%" height="15" fill="rgb(249,43,39)" fg:x="202" fg:w="17"/><text x="42.8660%" y="191.50">sf`&lt;..</text></g><g><title>sf`&lt;serde::__private::de::FlatMapDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (73 samples, 15.40%)</title><rect x="31.2236%" y="229" width="15.4008%" height="15" fill="rgb(209,38,44)" fg:x="148" fg:w="73"/><text x="31.4736%" y="239.50">sf`&lt;serde::__private::de..</text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28 samples, 5.91%)</title><rect x="40.7173%" y="213" width="5.9072%" height="15" fill="rgb(236,212,23)" fg:x="193" fg:w="28"/><text x="40.9673%" y="223.50">sf`hashb..</text></g><g><title>sf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 4.85%)</title><rect x="41.7722%" y="197" width="4.8523%" height="15" fill="rgb(242,79,21)" fg:x="198" fg:w="23"/><text x="42.0222%" y="207.50">sf`has..</text></g><g><title>sf`core::hash::BuildHasher::hash_one (2 samples, 0.42%)</title><rect x="46.2025%" y="181" width="0.4219%" height="15" fill="rgb(211,96,35)" fg:x="219" fg:w="2"/><text x="46.4525%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.21%)</title><rect x="46.6245%" y="229" width="0.2110%" height="15" fill="rgb(253,215,40)" fg:x="221" fg:w="1"/><text x="46.8745%" y="239.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.21%)</title><rect x="46.8354%" y="229" width="0.2110%" height="15" fill="rgb(211,81,21)" fg:x="222" fg:w="1"/><text x="47.0854%" y="239.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.21%)</title><rect x="47.0464%" y="229" width="0.2110%" height="15" fill="rgb(208,190,38)" fg:x="223" fg:w="1"/><text x="47.2964%" y="239.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (8 samples, 1.69%)</title><rect x="47.2574%" y="229" width="1.6878%" height="15" fill="rgb(235,213,38)" fg:x="224" fg:w="8"/><text x="47.5074%" y="239.50"></text></g><g><title>sf`DYLD-STUB$$free (2 samples, 0.42%)</title><rect x="48.9451%" y="229" width="0.4219%" height="15" fill="rgb(237,122,38)" fg:x="232" fg:w="2"/><text x="49.1951%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.21%)</title><rect x="49.3671%" y="165" width="0.2110%" height="15" fill="rgb(244,218,35)" fg:x="234" fg:w="1"/><text x="49.6171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.21%)</title><rect x="49.3671%" y="149" width="0.2110%" height="15" fill="rgb(240,68,47)" fg:x="234" fg:w="1"/><text x="49.6171%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.21%)</title><rect x="49.3671%" y="133" width="0.2110%" height="15" fill="rgb(210,16,53)" fg:x="234" fg:w="1"/><text x="49.6171%" y="143.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.42%)</title><rect x="49.3671%" y="229" width="0.4219%" height="15" fill="rgb(235,124,12)" fg:x="234" fg:w="2"/><text x="49.6171%" y="239.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (2 samples, 0.42%)</title><rect x="49.3671%" y="213" width="0.4219%" height="15" fill="rgb(224,169,11)" fg:x="234" fg:w="2"/><text x="49.6171%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.42%)</title><rect x="49.3671%" y="197" width="0.4219%" height="15" fill="rgb(250,166,2)" fg:x="234" fg:w="2"/><text x="49.6171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.42%)</title><rect x="49.3671%" y="181" width="0.4219%" height="15" fill="rgb(242,216,29)" fg:x="234" fg:w="2"/><text x="49.6171%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.21%)</title><rect x="49.5781%" y="165" width="0.2110%" height="15" fill="rgb(230,116,27)" fg:x="235" fg:w="1"/><text x="49.8281%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.21%)</title><rect x="51.0549%" y="213" width="0.2110%" height="15" fill="rgb(228,99,48)" fg:x="242" fg:w="1"/><text x="51.3049%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.63%)</title><rect x="51.2658%" y="213" width="0.6329%" height="15" fill="rgb(253,11,6)" fg:x="243" fg:w="3"/><text x="51.5158%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.42%)</title><rect x="53.7975%" y="197" width="0.4219%" height="15" fill="rgb(247,143,39)" fg:x="255" fg:w="2"/><text x="54.0475%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.84%)</title><rect x="56.1181%" y="181" width="0.8439%" height="15" fill="rgb(236,97,10)" fg:x="266" fg:w="4"/><text x="56.3681%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 5.49%)</title><rect x="51.8987%" y="213" width="5.4852%" height="15" fill="rgb(233,208,19)" fg:x="246" fg:w="26"/><text x="52.1487%" y="223.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 3.16%)</title><rect x="54.2194%" y="197" width="3.1646%" height="15" fill="rgb(216,164,2)" fg:x="257" fg:w="15"/><text x="54.4694%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.42%)</title><rect x="56.9620%" y="181" width="0.4219%" height="15" fill="rgb(220,129,5)" fg:x="270" fg:w="2"/><text x="57.2120%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.42%)</title><rect x="57.3840%" y="213" width="0.4219%" height="15" fill="rgb(242,17,10)" fg:x="272" fg:w="2"/><text x="57.6340%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.63%)</title><rect x="57.8059%" y="213" width="0.6329%" height="15" fill="rgb(242,107,0)" fg:x="274" fg:w="3"/><text x="58.0559%" y="223.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (51 samples, 10.76%)</title><rect x="49.7890%" y="229" width="10.7595%" height="15" fill="rgb(251,28,31)" fg:x="236" fg:w="51"/><text x="50.0390%" y="239.50">sf`core::ptr::dr..</text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (10 samples, 2.11%)</title><rect x="58.4388%" y="213" width="2.1097%" height="15" fill="rgb(233,223,10)" fg:x="277" fg:w="10"/><text x="58.6888%" y="223.50">s..</text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.42%)</title><rect x="64.7679%" y="197" width="0.4219%" height="15" fill="rgb(215,21,27)" fg:x="307" fg:w="2"/><text x="65.0179%" y="207.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.21%)</title><rect x="65.1899%" y="197" width="0.2110%" height="15" fill="rgb(232,23,21)" fg:x="309" fg:w="1"/><text x="65.4399%" y="207.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (6 samples, 1.27%)</title><rect x="65.4008%" y="181" width="1.2658%" height="15" fill="rgb(244,5,23)" fg:x="310" fg:w="6"/><text x="65.6508%" y="191.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (13 samples, 2.74%)</title><rect x="65.4008%" y="197" width="2.7426%" height="15" fill="rgb(226,81,46)" fg:x="310" fg:w="13"/><text x="65.6508%" y="207.50">sf..</text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (7 samples, 1.48%)</title><rect x="66.6667%" y="181" width="1.4768%" height="15" fill="rgb(247,70,30)" fg:x="316" fg:w="7"/><text x="66.9167%" y="191.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.21%)</title><rect x="68.1435%" y="197" width="0.2110%" height="15" fill="rgb(212,68,19)" fg:x="323" fg:w="1"/><text x="68.3935%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.42%)</title><rect x="68.7764%" y="181" width="0.4219%" height="15" fill="rgb(240,187,13)" fg:x="326" fg:w="2"/><text x="69.0264%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.21%)</title><rect x="69.8312%" y="149" width="0.2110%" height="15" fill="rgb(223,113,26)" fg:x="331" fg:w="1"/><text x="70.0812%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="70.0422%" y="133" width="0.2110%" height="15" fill="rgb(206,192,2)" fg:x="332" fg:w="1"/><text x="70.2922%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.21%)</title><rect x="70.2532%" y="133" width="0.2110%" height="15" fill="rgb(241,108,4)" fg:x="333" fg:w="1"/><text x="70.5032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 1.90%)</title><rect x="69.4093%" y="165" width="1.8987%" height="15" fill="rgb(247,173,49)" fg:x="329" fg:w="9"/><text x="69.6593%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 1.27%)</title><rect x="70.0422%" y="149" width="1.2658%" height="15" fill="rgb(224,114,35)" fg:x="332" fg:w="6"/><text x="70.2922%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.84%)</title><rect x="70.4641%" y="133" width="0.8439%" height="15" fill="rgb(245,159,27)" fg:x="334" fg:w="4"/><text x="70.7141%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="71.0970%" y="117" width="0.2110%" height="15" fill="rgb(245,172,44)" fg:x="337" fg:w="1"/><text x="71.3470%" y="127.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15 samples, 3.16%)</title><rect x="68.3544%" y="197" width="3.1646%" height="15" fill="rgb(236,23,11)" fg:x="324" fg:w="15"/><text x="68.6044%" y="207.50">sf`..</text></g><g><title>sf`alloc::raw_vec::finish_grow (11 samples, 2.32%)</title><rect x="69.1983%" y="181" width="2.3207%" height="15" fill="rgb(205,117,38)" fg:x="328" fg:w="11"/><text x="69.4483%" y="191.50">s..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.21%)</title><rect x="71.3080%" y="165" width="0.2110%" height="15" fill="rgb(237,72,25)" fg:x="338" fg:w="1"/><text x="71.5580%" y="175.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (1 samples, 0.21%)</title><rect x="71.5190%" y="197" width="0.2110%" height="15" fill="rgb(244,70,9)" fg:x="339" fg:w="1"/><text x="71.7690%" y="207.50"></text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::parse_integer (13 samples, 2.74%)</title><rect x="75.3165%" y="133" width="2.7426%" height="15" fill="rgb(217,125,39)" fg:x="357" fg:w="13"/><text x="75.5665%" y="143.50">sf..</text></g><g><title>sf`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (24 samples, 5.06%)</title><rect x="73.6287%" y="165" width="5.0633%" height="15" fill="rgb(235,36,10)" fg:x="349" fg:w="24"/><text x="73.8787%" y="175.50">sf`&lt;se..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (18 samples, 3.80%)</title><rect x="74.8945%" y="149" width="3.7975%" height="15" fill="rgb(251,123,47)" fg:x="355" fg:w="18"/><text x="75.1445%" y="159.50">sf`s..</text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::parse_number (3 samples, 0.63%)</title><rect x="78.0591%" y="133" width="0.6329%" height="15" fill="rgb(221,13,13)" fg:x="370" fg:w="3"/><text x="78.3091%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 1.05%)</title><rect x="79.7468%" y="149" width="1.0549%" height="15" fill="rgb(238,131,9)" fg:x="378" fg:w="5"/><text x="79.9968%" y="159.50"></text></g><g><title>sf`__rdl_alloc (1 samples, 0.21%)</title><rect x="80.8017%" y="149" width="0.2110%" height="15" fill="rgb(211,50,8)" fg:x="383" fg:w="1"/><text x="81.0517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.42%)</title><rect x="82.4895%" y="117" width="0.4219%" height="15" fill="rgb(245,182,24)" fg:x="391" fg:w="2"/><text x="82.7395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="83.3333%" y="101" width="0.2110%" height="15" fill="rgb(242,14,37)" fg:x="395" fg:w="1"/><text x="83.5833%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.21%)</title><rect x="83.5443%" y="101" width="0.2110%" height="15" fill="rgb(246,228,12)" fg:x="396" fg:w="1"/><text x="83.7943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 4.22%)</title><rect x="81.4346%" y="133" width="4.2194%" height="15" fill="rgb(213,55,15)" fg:x="386" fg:w="20"/><text x="81.6846%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 2.74%)</title><rect x="82.9114%" y="117" width="2.7426%" height="15" fill="rgb(209,9,3)" fg:x="393" fg:w="13"/><text x="83.1614%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 1.90%)</title><rect x="83.7553%" y="101" width="1.8987%" height="15" fill="rgb(230,59,30)" fg:x="397" fg:w="9"/><text x="84.0053%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.21%)</title><rect x="85.4430%" y="85" width="0.2110%" height="15" fill="rgb(209,121,21)" fg:x="405" fg:w="1"/><text x="85.6930%" y="95.50"></text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34 samples, 7.17%)</title><rect x="78.6920%" y="165" width="7.1730%" height="15" fill="rgb(220,109,13)" fg:x="373" fg:w="34"/><text x="78.9420%" y="175.50">sf`alloc::..</text></g><g><title>sf`alloc::raw_vec::finish_grow (23 samples, 4.85%)</title><rect x="81.0127%" y="149" width="4.8523%" height="15" fill="rgb(232,18,1)" fg:x="384" fg:w="23"/><text x="81.2627%" y="159.50">sf`all..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.21%)</title><rect x="85.6540%" y="133" width="0.2110%" height="15" fill="rgb(215,41,42)" fg:x="406" fg:w="1"/><text x="85.9040%" y="143.50"></text></g><g><title>sf`alloc::raw_vec::finish_grow (3 samples, 0.63%)</title><rect x="85.8650%" y="165" width="0.6329%" height="15" fill="rgb(224,123,36)" fg:x="407" fg:w="3"/><text x="86.1150%" y="175.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (67 samples, 14.14%)</title><rect x="72.5738%" y="181" width="14.1350%" height="15" fill="rgb(240,125,3)" fg:x="344" fg:w="67"/><text x="72.8238%" y="191.50">sf`&lt;serde::__private:..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (1 samples, 0.21%)</title><rect x="86.4979%" y="165" width="0.2110%" height="15" fill="rgb(205,98,50)" fg:x="410" fg:w="1"/><text x="86.7479%" y="175.50"></text></g><g><title>sf`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (4 samples, 0.84%)</title><rect x="86.7089%" y="181" width="0.8439%" height="15" fill="rgb(205,185,37)" fg:x="411" fg:w="4"/><text x="86.9589%" y="191.50"></text></g><g><title>sf`&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (125 samples, 26.37%)</title><rect x="61.3924%" y="213" width="26.3713%" height="15" fill="rgb(238,207,15)" fg:x="291" fg:w="125"/><text x="61.6424%" y="223.50">sf`&lt;serde::__private::de::content::Content..</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (76 samples, 16.03%)</title><rect x="71.7300%" y="197" width="16.0338%" height="15" fill="rgb(213,199,42)" fg:x="340" fg:w="76"/><text x="71.9800%" y="207.50">sf`serde::de::Deserialize..</text></g><g><title>sf`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.21%)</title><rect x="87.5527%" y="181" width="0.2110%" height="15" fill="rgb(235,201,11)" fg:x="415" fg:w="1"/><text x="87.8027%" y="191.50"></text></g><g><title>sf`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.21%)</title><rect x="87.7637%" y="213" width="0.2110%" height="15" fill="rgb(207,46,11)" fg:x="416" fg:w="1"/><text x="88.0137%" y="223.50"></text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (1 samples, 0.21%)</title><rect x="87.9747%" y="213" width="0.2110%" height="15" fill="rgb(241,35,35)" fg:x="417" fg:w="1"/><text x="88.2247%" y="223.50"></text></g><g><title>sf`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (298 samples, 62.87%)</title><rect x="25.5274%" y="245" width="62.8692%" height="15" fill="rgb(243,32,47)" fg:x="121" fg:w="298"/><text x="25.7774%" y="255.50">sf`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (132 samples, 27.85%)</title><rect x="60.5485%" y="229" width="27.8481%" height="15" fill="rgb(247,202,23)" fg:x="287" fg:w="132"/><text x="60.7985%" y="239.50">sf`serde::de::Deserializer::__deserialize_con..</text></g><g><title>sf`serde_json::de::Deserializer&lt;R&gt;::end_map (1 samples, 0.21%)</title><rect x="88.1857%" y="213" width="0.2110%" height="15" fill="rgb(219,102,11)" fg:x="418" fg:w="1"/><text x="88.4357%" y="223.50"></text></g><g><title>sf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="88.3966%" y="245" width="0.4219%" height="15" fill="rgb(243,110,44)" fg:x="419" fg:w="2"/><text x="88.6466%" y="255.50"></text></g><g><title>sf`DYLD-STUB$$free (1 samples, 0.21%)</title><rect x="88.8186%" y="245" width="0.2110%" height="15" fill="rgb(222,74,54)" fg:x="421" fg:w="1"/><text x="89.0686%" y="255.50"></text></g><g><title>sf`core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.21%)</title><rect x="89.0295%" y="245" width="0.2110%" height="15" fill="rgb(216,99,12)" fg:x="422" fg:w="1"/><text x="89.2795%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.21%)</title><rect x="90.2954%" y="181" width="0.2110%" height="15" fill="rgb(226,22,26)" fg:x="428" fg:w="1"/><text x="90.5454%" y="191.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (1 samples, 0.21%)</title><rect x="90.5063%" y="181" width="0.2110%" height="15" fill="rgb(217,163,10)" fg:x="429" fg:w="1"/><text x="90.7563%" y="191.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.63%)</title><rect x="91.3502%" y="165" width="0.6329%" height="15" fill="rgb(213,25,53)" fg:x="433" fg:w="3"/><text x="91.6002%" y="175.50"></text></g><g><title>sf`core::slice::sort::stable::driftsort_main (15 samples, 3.16%)</title><rect x="89.2405%" y="245" width="3.1646%" height="15" fill="rgb(252,105,26)" fg:x="423" fg:w="15"/><text x="89.4905%" y="255.50">sf`..</text></g><g><title>sf`core::slice::sort::stable::drift::sort (15 samples, 3.16%)</title><rect x="89.2405%" y="229" width="3.1646%" height="15" fill="rgb(220,39,43)" fg:x="423" fg:w="15"/><text x="89.4905%" y="239.50">sf`..</text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (13 samples, 2.74%)</title><rect x="89.6624%" y="213" width="2.7426%" height="15" fill="rgb(229,68,48)" fg:x="425" fg:w="13"/><text x="89.9124%" y="223.50">sf..</text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (13 samples, 2.74%)</title><rect x="89.6624%" y="197" width="2.7426%" height="15" fill="rgb(252,8,32)" fg:x="425" fg:w="13"/><text x="89.9124%" y="207.50">sf..</text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (8 samples, 1.69%)</title><rect x="90.7173%" y="181" width="1.6878%" height="15" fill="rgb(223,20,43)" fg:x="430" fg:w="8"/><text x="90.9673%" y="191.50"></text></g><g><title>sf`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.42%)</title><rect x="91.9831%" y="165" width="0.4219%" height="15" fill="rgb(229,81,49)" fg:x="436" fg:w="2"/><text x="92.2331%" y="175.50"></text></g><g><title>sf`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.42%)</title><rect x="91.9831%" y="149" width="0.4219%" height="15" fill="rgb(236,28,36)" fg:x="436" fg:w="2"/><text x="92.2331%" y="159.50"></text></g><g><title>sf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 1.27%)</title><rect x="92.8270%" y="181" width="1.2658%" height="15" fill="rgb(249,185,26)" fg:x="440" fg:w="6"/><text x="93.0770%" y="191.50"></text></g><g><title>sf`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 1.90%)</title><rect x="92.4051%" y="213" width="1.8987%" height="15" fill="rgb(249,174,33)" fg:x="438" fg:w="9"/><text x="92.6551%" y="223.50">s..</text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 1.90%)</title><rect x="92.4051%" y="197" width="1.8987%" height="15" fill="rgb(233,201,37)" fg:x="438" fg:w="9"/><text x="92.6551%" y="207.50">s..</text></g><g><title>sf`core::hash::BuildHasher::hash_one (1 samples, 0.21%)</title><rect x="94.0928%" y="181" width="0.2110%" height="15" fill="rgb(221,78,26)" fg:x="446" fg:w="1"/><text x="94.3428%" y="191.50"></text></g><g><title>sf`safetensors::tensor::Metadata::new (10 samples, 2.11%)</title><rect x="92.4051%" y="245" width="2.1097%" height="15" fill="rgb(250,127,30)" fg:x="438" fg:w="10"/><text x="92.6551%" y="255.50">s..</text></g><g><title>sf`alloc::vec::in_place_collect::from_iter_in_place (10 samples, 2.11%)</title><rect x="92.4051%" y="229" width="2.1097%" height="15" fill="rgb(230,49,44)" fg:x="438" fg:w="10"/><text x="92.6551%" y="239.50">s..</text></g><g><title>sf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.21%)</title><rect x="94.3038%" y="213" width="0.2110%" height="15" fill="rgb(229,67,23)" fg:x="447" fg:w="1"/><text x="94.5538%" y="223.50"></text></g><g><title>sf`safetensors::tensor::SafeTensors::deserialize (341 samples, 71.94%)</title><rect x="22.7848%" y="309" width="71.9409%" height="15" fill="rgb(249,83,47)" fg:x="108" fg:w="341"/><text x="23.0348%" y="319.50">sf`safetensors::tensor::SafeTensors::deserialize</text></g><g><title>sf`safetensors::tensor::SafeTensors::read_metadata (341 samples, 71.94%)</title><rect x="22.7848%" y="293" width="71.9409%" height="15" fill="rgb(215,43,3)" fg:x="108" fg:w="341"/><text x="23.0348%" y="303.50">sf`safetensors::tensor::SafeTensors::read_metadata</text></g><g><title>sf`serde_json::de::from_trait (330 samples, 69.62%)</title><rect x="25.1055%" y="277" width="69.6203%" height="15" fill="rgb(238,154,13)" fg:x="119" fg:w="330"/><text x="25.3555%" y="287.50">sf`serde_json::de::from_trait</text></g><g><title>sf`&lt;safetensors::tensor::Metadata as serde::de::Deserialize&gt;::deserialize (330 samples, 69.62%)</title><rect x="25.1055%" y="261" width="69.6203%" height="15" fill="rgb(219,56,2)" fg:x="119" fg:w="330"/><text x="25.3555%" y="271.50">sf`&lt;safetensors::tensor::Metadata as serde::de::Deserialize&gt;::deserialize</text></g><g><title>sf`serde::de::Deserializer::__deserialize_content (1 samples, 0.21%)</title><rect x="94.5148%" y="245" width="0.2110%" height="15" fill="rgb(233,0,4)" fg:x="448" fg:w="1"/><text x="94.7648%" y="255.50"></text></g><g><title>all (474 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="474"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (474 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="474"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>sf`main (474 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="474"/><text x="0.2500%" y="399.50">sf`main</text></g><g><title>sf`std::rt::lang_start_internal (474 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="474"/><text x="0.2500%" y="383.50">sf`std::rt::lang_start_internal</text></g><g><title>sf`std::rt::lang_start::_{{closure}} (474 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="474"/><text x="0.2500%" y="367.50">sf`std::rt::lang_start::_{{closure}}</text></g><g><title>sf`std::sys::backtrace::__rust_begin_short_backtrace (474 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="474"/><text x="0.2500%" y="351.50">sf`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>sf`sf::main (418 samples, 88.19%)</title><rect x="11.8143%" y="325" width="88.1857%" height="15" fill="rgb(215,215,53)" fg:x="56" fg:w="418"/><text x="12.0643%" y="335.50">sf`sf::main</text></g><g><title>sf`std::fs::OpenOptions::_open (25 samples, 5.27%)</title><rect x="94.7257%" y="309" width="5.2743%" height="15" fill="rgb(223,4,10)" fg:x="449" fg:w="25"/><text x="94.9757%" y="319.50">sf`std..</text></g><g><title>libsystem_kernel.dylib`__open (24 samples, 5.06%)</title><rect x="94.9367%" y="293" width="5.0633%" height="15" fill="rgb(234,103,6)" fg:x="450" fg:w="24"/><text x="95.1867%" y="303.50">libsys..</text></g></svg></svg>
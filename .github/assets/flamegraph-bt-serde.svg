<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="9870"><g><title>bt`DYLD-STUB$$free (10 samples, 0.10%)</title><rect x="0.0000%" y="197" width="0.1013%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="10"/><text x="0.2500%" y="207.50"></text></g><g><title>bt`DYLD-STUB$$munmap (1 samples, 0.01%)</title><rect x="0.1013%" y="197" width="0.0101%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="1"/><text x="0.3513%" y="207.50"></text></g><g><title>10  27819                        :tick-30s (1 samples, 0.01%)</title><rect x="0.5471%" y="181" width="0.0101%" height="15" fill="rgb(221,193,54)" fg:x="54" fg:w="1"/><text x="0.7971%" y="191.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.01%)</title><rect x="0.5471%" y="165" width="0.0101%" height="15" fill="rgb(248,212,6)" fg:x="54" fg:w="1"/><text x="0.7971%" y="175.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (9 samples, 0.09%)</title><rect x="1.1550%" y="133" width="0.0912%" height="15" fill="rgb(208,68,35)" fg:x="114" fg:w="9"/><text x="1.4050%" y="143.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (22 samples, 0.22%)</title><rect x="1.2462%" y="133" width="0.2229%" height="15" fill="rgb(232,128,0)" fg:x="123" fg:w="22"/><text x="1.4962%" y="143.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (14 samples, 0.14%)</title><rect x="1.4691%" y="133" width="0.1418%" height="15" fill="rgb(207,160,47)" fg:x="145" fg:w="14"/><text x="1.7191%" y="143.50"></text></g><g><title>bt`DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="1.9352%" y="101" width="0.0304%" height="15" fill="rgb(228,23,34)" fg:x="191" fg:w="3"/><text x="2.1852%" y="111.50"></text></g><g><title>bt`__rdl_alloc (13 samples, 0.13%)</title><rect x="1.9656%" y="101" width="0.1317%" height="15" fill="rgb(218,30,26)" fg:x="194" fg:w="13"/><text x="2.2156%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (32 samples, 0.32%)</title><rect x="2.0973%" y="101" width="0.3242%" height="15" fill="rgb(220,122,19)" fg:x="207" fg:w="32"/><text x="2.3473%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (45 samples, 0.46%)</title><rect x="2.4215%" y="101" width="0.4559%" height="15" fill="rgb(250,228,42)" fg:x="239" fg:w="45"/><text x="2.6715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.09%)</title><rect x="3.5562%" y="69" width="0.0912%" height="15" fill="rgb(240,193,28)" fg:x="351" fg:w="9"/><text x="3.8062%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.18%)</title><rect x="3.6474%" y="69" width="0.1824%" height="15" fill="rgb(216,20,37)" fg:x="360" fg:w="18"/><text x="3.8974%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (9 samples, 0.09%)</title><rect x="4.0324%" y="53" width="0.0912%" height="15" fill="rgb(206,188,39)" fg:x="398" fg:w="9"/><text x="4.2824%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (15 samples, 0.15%)</title><rect x="5.0557%" y="37" width="0.1520%" height="15" fill="rgb(217,207,13)" fg:x="499" fg:w="15"/><text x="5.3057%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (190 samples, 1.93%)</title><rect x="3.3435%" y="85" width="1.9250%" height="15" fill="rgb(231,73,38)" fg:x="330" fg:w="190"/><text x="3.5935%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (142 samples, 1.44%)</title><rect x="3.8298%" y="69" width="1.4387%" height="15" fill="rgb(225,20,46)" fg:x="378" fg:w="142"/><text x="4.0798%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (113 samples, 1.14%)</title><rect x="4.1236%" y="53" width="1.1449%" height="15" fill="rgb(210,31,41)" fg:x="407" fg:w="113"/><text x="4.3736%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.06%)</title><rect x="5.2077%" y="37" width="0.0608%" height="15" fill="rgb(221,200,47)" fg:x="514" fg:w="6"/><text x="5.4577%" y="47.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (243 samples, 2.46%)</title><rect x="2.8774%" y="101" width="2.4620%" height="15" fill="rgb(226,26,5)" fg:x="284" fg:w="243"/><text x="3.1274%" y="111.50">bt..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.07%)</title><rect x="5.2685%" y="85" width="0.0709%" height="15" fill="rgb(249,33,26)" fg:x="520" fg:w="7"/><text x="5.5185%" y="95.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (377 samples, 3.82%)</title><rect x="1.7123%" y="117" width="3.8197%" height="15" fill="rgb(235,183,28)" fg:x="169" fg:w="377"/><text x="1.9623%" y="127.50">bt`&lt;..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.19%)</title><rect x="5.3394%" y="101" width="0.1925%" height="15" fill="rgb(221,5,38)" fg:x="527" fg:w="19"/><text x="5.5894%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (40 samples, 0.41%)</title><rect x="5.5319%" y="117" width="0.4053%" height="15" fill="rgb(247,18,42)" fg:x="546" fg:w="40"/><text x="5.7819%" y="127.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (13 samples, 0.13%)</title><rect x="5.9372%" y="117" width="0.1317%" height="15" fill="rgb(241,131,45)" fg:x="586" fg:w="13"/><text x="6.1872%" y="127.50"></text></g><g><title>bt`bincode::varint::decode_unsigned::varint_decode_u32 (9 samples, 0.09%)</title><rect x="6.0689%" y="117" width="0.0912%" height="15" fill="rgb(249,31,29)" fg:x="599" fg:w="9"/><text x="6.3189%" y="127.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (451 samples, 4.57%)</title><rect x="1.6109%" y="133" width="4.5694%" height="15" fill="rgb(225,111,53)" fg:x="159" fg:w="451"/><text x="1.8609%" y="143.50">bt`bi..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="6.1601%" y="117" width="0.0203%" height="15" fill="rgb(238,160,17)" fg:x="608" fg:w="2"/><text x="6.4101%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="6.1601%" y="101" width="0.0203%" height="15" fill="rgb(214,148,48)" fg:x="608" fg:w="2"/><text x="6.4101%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="6.1601%" y="85" width="0.0203%" height="15" fill="rgb(232,36,49)" fg:x="608" fg:w="2"/><text x="6.4101%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="6.1702%" y="69" width="0.0101%" height="15" fill="rgb(209,103,24)" fg:x="609" fg:w="1"/><text x="6.4202%" y="79.50"></text></g><g><title>bt`DYLD-STUB$$calloc (4 samples, 0.04%)</title><rect x="6.3019%" y="101" width="0.0405%" height="15" fill="rgb(229,88,8)" fg:x="622" fg:w="4"/><text x="6.5519%" y="111.50"></text></g><g><title>bt`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="6.3425%" y="101" width="0.0203%" height="15" fill="rgb(213,181,19)" fg:x="626" fg:w="2"/><text x="6.5925%" y="111.50"></text></g><g><title>bt`__rdl_alloc_zeroed (10 samples, 0.10%)</title><rect x="6.3627%" y="101" width="0.1013%" height="15" fill="rgb(254,191,54)" fg:x="628" fg:w="10"/><text x="6.6127%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (19 samples, 0.19%)</title><rect x="6.4640%" y="101" width="0.1925%" height="15" fill="rgb(241,83,37)" fg:x="638" fg:w="19"/><text x="6.7140%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (12 samples, 0.12%)</title><rect x="6.9605%" y="69" width="0.1216%" height="15" fill="rgb(233,36,39)" fg:x="687" fg:w="12"/><text x="7.2105%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.20%)</title><rect x="7.0821%" y="69" width="0.2026%" height="15" fill="rgb(226,3,54)" fg:x="699" fg:w="20"/><text x="7.3321%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (9 samples, 0.09%)</title><rect x="7.5785%" y="53" width="0.0912%" height="15" fill="rgb(245,192,40)" fg:x="748" fg:w="9"/><text x="7.8285%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (15 samples, 0.15%)</title><rect x="7.6697%" y="53" width="0.1520%" height="15" fill="rgb(238,167,29)" fg:x="757" fg:w="15"/><text x="7.9197%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="7.8217%" y="53" width="0.0304%" height="15" fill="rgb(232,182,51)" fg:x="772" fg:w="3"/><text x="8.0717%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (11 samples, 0.11%)</title><rect x="8.8956%" y="37" width="0.1114%" height="15" fill="rgb(231,60,39)" fg:x="878" fg:w="11"/><text x="9.1456%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (225 samples, 2.28%)</title><rect x="6.7882%" y="85" width="2.2796%" height="15" fill="rgb(208,69,12)" fg:x="670" fg:w="225"/><text x="7.0382%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (176 samples, 1.78%)</title><rect x="7.2847%" y="69" width="1.7832%" height="15" fill="rgb(235,93,37)" fg:x="719" fg:w="176"/><text x="7.5347%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (120 samples, 1.22%)</title><rect x="7.8521%" y="53" width="1.2158%" height="15" fill="rgb(213,116,39)" fg:x="775" fg:w="120"/><text x="8.1021%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.06%)</title><rect x="9.0071%" y="37" width="0.0608%" height="15" fill="rgb(222,207,29)" fg:x="889" fg:w="6"/><text x="9.2571%" y="47.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (255 samples, 2.58%)</title><rect x="6.6565%" y="101" width="2.5836%" height="15" fill="rgb(206,96,30)" fg:x="657" fg:w="255"/><text x="6.9065%" y="111.50">bt..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.17%)</title><rect x="9.0679%" y="85" width="0.1722%" height="15" fill="rgb(218,138,4)" fg:x="895" fg:w="17"/><text x="9.3179%" y="95.50"></text></g><g><title>bt`core::str::converts::from_utf8 (69 samples, 0.70%)</title><rect x="9.2401%" y="101" width="0.6991%" height="15" fill="rgb(250,191,14)" fg:x="912" fg:w="69"/><text x="9.4901%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (22 samples, 0.22%)</title><rect x="9.9392%" y="101" width="0.2229%" height="15" fill="rgb(239,60,40)" fg:x="981" fg:w="22"/><text x="10.1892%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (12 samples, 0.12%)</title><rect x="10.1621%" y="101" width="0.1216%" height="15" fill="rgb(206,27,48)" fg:x="1003" fg:w="12"/><text x="10.4121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.06%)</title><rect x="10.2837%" y="101" width="0.0608%" height="15" fill="rgb(225,35,8)" fg:x="1015" fg:w="6"/><text x="10.5337%" y="111.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (495 samples, 5.02%)</title><rect x="6.2411%" y="117" width="5.0152%" height="15" fill="rgb(250,213,24)" fg:x="616" fg:w="495"/><text x="6.4911%" y="127.50">bt`bin..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (90 samples, 0.91%)</title><rect x="10.3445%" y="101" width="0.9119%" height="15" fill="rgb(247,123,22)" fg:x="1021" fg:w="90"/><text x="10.5945%" y="111.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (19 samples, 0.19%)</title><rect x="11.2563%" y="117" width="0.1925%" height="15" fill="rgb(231,138,38)" fg:x="1111" fg:w="19"/><text x="11.5063%" y="127.50"></text></g><g><title>bt`core::str::converts::from_utf8 (7 samples, 0.07%)</title><rect x="11.4488%" y="117" width="0.0709%" height="15" fill="rgb(231,145,46)" fg:x="1130" fg:w="7"/><text x="11.6988%" y="127.50"></text></g><g><title>bt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (97 samples, 0.98%)</title><rect x="11.8034%" y="101" width="0.9828%" height="15" fill="rgb(251,118,11)" fg:x="1165" fg:w="97"/><text x="12.0534%" y="111.50"></text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (164 samples, 1.66%)</title><rect x="11.5198%" y="117" width="1.6616%" height="15" fill="rgb(217,147,25)" fg:x="1137" fg:w="164"/><text x="11.7698%" y="127.50"></text></g><g><title>bt`core::hash::BuildHasher::hash_one (39 samples, 0.40%)</title><rect x="12.7862%" y="101" width="0.3951%" height="15" fill="rgb(247,81,37)" fg:x="1262" fg:w="39"/><text x="13.0362%" y="111.50"></text></g><g><title>bt`hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="13.1814%" y="117" width="0.0101%" height="15" fill="rgb(209,12,38)" fg:x="1301" fg:w="1"/><text x="13.4314%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="13.1915%" y="117" width="0.0101%" height="15" fill="rgb(227,1,9)" fg:x="1302" fg:w="1"/><text x="13.4415%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.01%)</title><rect x="13.2016%" y="117" width="0.0101%" height="15" fill="rgb(248,47,43)" fg:x="1303" fg:w="1"/><text x="13.4516%" y="127.50"></text></g><g><title>bt`bincode::features::impl_std::_&lt;impl bincode::de::Decode&lt;Context&gt; for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::decode (695 samples, 7.04%)</title><rect x="6.1803%" y="133" width="7.0415%" height="15" fill="rgb(221,10,30)" fg:x="610" fg:w="695"/><text x="6.4303%" y="143.50">bt`bincod..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="13.2118%" y="117" width="0.0101%" height="15" fill="rgb(210,229,1)" fg:x="1304" fg:w="1"/><text x="13.4618%" y="127.50"></text></g><g><title>bt`&lt;bintensors::tensor::Metadata as bincode::de::Decode&lt;__Context&gt;&gt;::decode (1,197 samples, 12.13%)</title><rect x="1.1550%" y="149" width="12.1277%" height="15" fill="rgb(222,148,37)" fg:x="114" fg:w="1197"/><text x="1.4050%" y="159.50">bt`&lt;bintensors::te..</text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.06%)</title><rect x="13.2219%" y="133" width="0.0608%" height="15" fill="rgb(234,67,33)" fg:x="1305" fg:w="6"/><text x="13.4719%" y="143.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::read_metadata (1,297 samples, 13.14%)</title><rect x="0.5572%" y="165" width="13.1408%" height="15" fill="rgb(247,98,35)" fg:x="55" fg:w="1297"/><text x="0.8072%" y="175.50">bt`bintensors::tenso..</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (41 samples, 0.42%)</title><rect x="13.2827%" y="149" width="0.4154%" height="15" fill="rgb(247,138,52)" fg:x="1311" fg:w="41"/><text x="13.5327%" y="159.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::deserialize (1,308 samples, 13.25%)</title><rect x="0.5572%" y="181" width="13.2523%" height="15" fill="rgb(213,79,30)" fg:x="55" fg:w="1308"/><text x="0.8072%" y="191.50">bt`bintensors::tenso..</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (11 samples, 0.11%)</title><rect x="13.6981%" y="165" width="0.1114%" height="15" fill="rgb(246,177,23)" fg:x="1352" fg:w="11"/><text x="13.9481%" y="175.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::read_metadata (1 samples, 0.01%)</title><rect x="13.8095%" y="181" width="0.0101%" height="15" fill="rgb(230,62,27)" fg:x="1363" fg:w="1"/><text x="14.0595%" y="191.50"></text></g><g><title>bt`bintensors::tensor::serialize (2 samples, 0.02%)</title><rect x="13.8197%" y="181" width="0.0203%" height="15" fill="rgb(216,154,8)" fg:x="1364" fg:w="2"/><text x="14.0697%" y="191.50"></text></g><g><title>bt`bintensors::tensor::prepare (1 samples, 0.01%)</title><rect x="13.8298%" y="165" width="0.0101%" height="15" fill="rgb(244,35,45)" fg:x="1365" fg:w="1"/><text x="14.0798%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="13.8298%" y="149" width="0.0101%" height="15" fill="rgb(251,115,12)" fg:x="1365" fg:w="1"/><text x="14.0798%" y="159.50"></text></g><g><title>bt`bintensors::tensor::prepare (1 samples, 0.01%)</title><rect x="13.8399%" y="165" width="0.0101%" height="15" fill="rgb(240,54,50)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="175.50"></text></g><g><title>bt`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.01%)</title><rect x="13.8399%" y="149" width="0.0101%" height="15" fill="rgb(233,84,52)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="159.50"></text></g><g><title>bt`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="13.8399%" y="133" width="0.0101%" height="15" fill="rgb(207,117,47)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="143.50"></text></g><g><title>bt`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="13.8399%" y="117" width="0.0101%" height="15" fill="rgb(249,43,39)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="13.8399%" y="101" width="0.0101%" height="15" fill="rgb(209,38,44)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="13.8399%" y="85" width="0.0101%" height="15" fill="rgb(236,212,23)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="13.8399%" y="69" width="0.0101%" height="15" fill="rgb(242,79,21)" fg:x="1366" fg:w="1"/><text x="14.0899%" y="79.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (3 samples, 0.03%)</title><rect x="13.8501%" y="165" width="0.0304%" height="15" fill="rgb(211,96,35)" fg:x="1367" fg:w="3"/><text x="14.1001%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.03%)</title><rect x="13.8501%" y="149" width="0.0304%" height="15" fill="rgb(253,215,40)" fg:x="1367" fg:w="3"/><text x="14.1001%" y="159.50"></text></g><g><title>9  27819                        :tick-30s (1 samples, 0.01%)</title><rect x="13.8703%" y="133" width="0.0101%" height="15" fill="rgb(211,81,21)" fg:x="1369" fg:w="1"/><text x="14.1203%" y="143.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.01%)</title><rect x="13.8703%" y="117" width="0.0101%" height="15" fill="rgb(208,190,38)" fg:x="1369" fg:w="1"/><text x="14.1203%" y="127.50"></text></g><g><title>13  27819                        :tick-30s (1 samples, 0.01%)</title><rect x="13.8804%" y="149" width="0.0101%" height="15" fill="rgb(235,213,38)" fg:x="1370" fg:w="1"/><text x="14.1304%" y="159.50"></text></g><g><title>CPU     ID                    FUNCTION:NAME (1 samples, 0.01%)</title><rect x="13.8804%" y="133" width="0.0101%" height="15" fill="rgb(237,122,38)" fg:x="1370" fg:w="1"/><text x="14.1304%" y="143.50"></text></g><g><title>bt`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.01%)</title><rect x="13.8906%" y="133" width="0.0101%" height="15" fill="rgb(244,218,35)" fg:x="1371" fg:w="1"/><text x="14.1406%" y="143.50"></text></g><g><title>bt`std::io::Write::write_all (1,288 samples, 13.05%)</title><rect x="13.8906%" y="149" width="13.0496%" height="15" fill="rgb(240,68,47)" fg:x="1371" fg:w="1288"/><text x="14.1406%" y="159.50">bt`std::io::Write::w..</text></g><g><title>libsystem_kernel.dylib`write (1,287 samples, 13.04%)</title><rect x="13.9007%" y="133" width="13.0395%" height="15" fill="rgb(210,16,53)" fg:x="1372" fg:w="1287"/><text x="14.1507%" y="143.50">libsystem_kernel.dyl..</text></g><g><title>bt`bintensors::tensor::serialize_to_file (1,305 samples, 13.22%)</title><rect x="13.8399%" y="181" width="13.2219%" height="15" fill="rgb(235,124,12)" fg:x="1366" fg:w="1305"/><text x="14.0899%" y="191.50">bt`bintensors::tenso..</text></g><g><title>bt`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1,301 samples, 13.18%)</title><rect x="13.8804%" y="165" width="13.1814%" height="15" fill="rgb(224,169,11)" fg:x="1370" fg:w="1301"/><text x="14.1304%" y="175.50">bt`std::io::buffered..</text></g><g><title>bt`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.12%)</title><rect x="26.9402%" y="149" width="0.1216%" height="15" fill="rgb(250,166,2)" fg:x="2659" fg:w="12"/><text x="27.1902%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 0.12%)</title><rect x="26.9402%" y="133" width="0.1216%" height="15" fill="rgb(242,216,29)" fg:x="2659" fg:w="12"/><text x="27.1902%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (63 samples, 0.64%)</title><rect x="27.0618%" y="165" width="0.6383%" height="15" fill="rgb(230,116,27)" fg:x="2671" fg:w="63"/><text x="27.3118%" y="175.50"></text></g><g><title>bt`memmap2::os::MmapInner::map (64 samples, 0.65%)</title><rect x="27.0618%" y="181" width="0.6484%" height="15" fill="rgb(228,99,48)" fg:x="2671" fg:w="64"/><text x="27.3118%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mmap (1 samples, 0.01%)</title><rect x="27.7001%" y="165" width="0.0101%" height="15" fill="rgb(253,11,6)" fg:x="2734" fg:w="1"/><text x="27.9501%" y="175.50"></text></g><g><title>bt`memmap2::os::file_len (16 samples, 0.16%)</title><rect x="27.7102%" y="181" width="0.1621%" height="15" fill="rgb(247,143,39)" fg:x="2735" fg:w="16"/><text x="27.9602%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`fstat (16 samples, 0.16%)</title><rect x="27.7102%" y="165" width="0.1621%" height="15" fill="rgb(236,97,10)" fg:x="2735" fg:w="16"/><text x="27.9602%" y="175.50"></text></g><g><title>bt`std::fs::File::metadata (1 samples, 0.01%)</title><rect x="27.8723%" y="181" width="0.0101%" height="15" fill="rgb(233,208,19)" fg:x="2751" fg:w="1"/><text x="28.1223%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (214 samples, 2.17%)</title><rect x="27.8825%" y="165" width="2.1682%" height="15" fill="rgb(216,164,2)" fg:x="2752" fg:w="214"/><text x="28.1325%" y="175.50">l..</text></g><g><title>bt`std::fs::OpenOptions::_open (215 samples, 2.18%)</title><rect x="27.8825%" y="181" width="2.1783%" height="15" fill="rgb(220,129,5)" fg:x="2752" fg:w="215"/><text x="28.1325%" y="191.50">b..</text></g><g><title>libsystem_kernel.dylib`open (1 samples, 0.01%)</title><rect x="30.0507%" y="165" width="0.0101%" height="15" fill="rgb(242,17,10)" fg:x="2966" fg:w="1"/><text x="30.3007%" y="175.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (2 samples, 0.02%)</title><rect x="30.0608%" y="165" width="0.0203%" height="15" fill="rgb(242,107,0)" fg:x="2967" fg:w="2"/><text x="30.3108%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="30.0608%" y="149" width="0.0203%" height="15" fill="rgb(251,28,31)" fg:x="2967" fg:w="2"/><text x="30.3108%" y="159.50"></text></g><g><title>bt`std::fs::read::inner (2,228 samples, 22.57%)</title><rect x="30.0608%" y="181" width="22.5735%" height="15" fill="rgb(233,223,10)" fg:x="2967" fg:w="2228"/><text x="30.3108%" y="191.50">bt`std::fs::read::inner</text></g><g><title>libsystem_kernel.dylib`read (2,226 samples, 22.55%)</title><rect x="30.0811%" y="165" width="22.5532%" height="15" fill="rgb(215,21,27)" fg:x="2969" fg:w="2226"/><text x="30.3311%" y="175.50">libsystem_kernel.dylib`read</text></g><g><title>bt`std::fs::write::inner (2 samples, 0.02%)</title><rect x="52.6342%" y="181" width="0.0203%" height="15" fill="rgb(232,23,21)" fg:x="5195" fg:w="2"/><text x="52.8842%" y="191.50"></text></g><g><title>bt`std::fs::OpenOptions::_open (2 samples, 0.02%)</title><rect x="52.6342%" y="165" width="0.0203%" height="15" fill="rgb(244,5,23)" fg:x="5195" fg:w="2"/><text x="52.8842%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="52.6342%" y="149" width="0.0203%" height="15" fill="rgb(226,81,46)" fg:x="5195" fg:w="2"/><text x="52.8842%" y="159.50"></text></g><g><title>bt`std::sys::pal::unix::fs::unlink (318 samples, 3.22%)</title><rect x="52.6545%" y="181" width="3.2219%" height="15" fill="rgb(247,70,30)" fg:x="5197" fg:w="318"/><text x="52.9045%" y="191.50">bt`..</text></g><g><title>libsystem_kernel.dylib`__unlink (318 samples, 3.22%)</title><rect x="52.6545%" y="165" width="3.2219%" height="15" fill="rgb(212,68,19)" fg:x="5197" fg:w="318"/><text x="52.9045%" y="175.50">lib..</text></g><g><title>libsystem_kernel.dylib`close (6 samples, 0.06%)</title><rect x="55.8764%" y="181" width="0.0608%" height="15" fill="rgb(240,187,13)" fg:x="5515" fg:w="6"/><text x="56.1264%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (1,298 samples, 13.15%)</title><rect x="55.9372%" y="181" width="13.1510%" height="15" fill="rgb(223,113,26)" fg:x="5521" fg:w="1298"/><text x="56.1872%" y="191.50">libsystem_kernel.dyl..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (12 samples, 0.12%)</title><rect x="69.0881%" y="181" width="0.1216%" height="15" fill="rgb(206,192,2)" fg:x="6819" fg:w="12"/><text x="69.3381%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (217 samples, 2.20%)</title><rect x="69.5441%" y="165" width="2.1986%" height="15" fill="rgb(241,108,4)" fg:x="6864" fg:w="217"/><text x="69.7941%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_szone_free (643 samples, 6.51%)</title><rect x="69.2097%" y="181" width="6.5147%" height="15" fill="rgb(247,173,49)" fg:x="6831" fg:w="643"/><text x="69.4597%" y="191.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`free_large (393 samples, 3.98%)</title><rect x="71.7427%" y="165" width="3.9818%" height="15" fill="rgb(224,114,35)" fg:x="7081" fg:w="393"/><text x="71.9927%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (393 samples, 3.98%)</title><rect x="71.7427%" y="149" width="3.9818%" height="15" fill="rgb(245,159,27)" fg:x="7081" fg:w="393"/><text x="71.9927%" y="159.50">libs..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (393 samples, 3.98%)</title><rect x="71.7427%" y="133" width="3.9818%" height="15" fill="rgb(245,172,44)" fg:x="7081" fg:w="393"/><text x="71.9927%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (50 samples, 0.51%)</title><rect x="77.2340%" y="165" width="0.5066%" height="15" fill="rgb(236,23,11)" fg:x="7623" fg:w="50"/><text x="77.4840%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (17 samples, 0.17%)</title><rect x="77.7406%" y="165" width="0.1722%" height="15" fill="rgb(205,117,38)" fg:x="7673" fg:w="17"/><text x="77.9906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.06%)</title><rect x="77.9129%" y="165" width="0.0608%" height="15" fill="rgb(237,72,25)" fg:x="7690" fg:w="6"/><text x="78.1629%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (89 samples, 0.90%)</title><rect x="80.9625%" y="149" width="0.9017%" height="15" fill="rgb(244,70,9)" fg:x="7991" fg:w="89"/><text x="81.2125%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (734 samples, 7.44%)</title><rect x="75.7244%" y="181" width="7.4367%" height="15" fill="rgb(217,125,39)" fg:x="7474" fg:w="734"/><text x="75.9744%" y="191.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (512 samples, 5.19%)</title><rect x="77.9737%" y="165" width="5.1874%" height="15" fill="rgb(235,36,10)" fg:x="7696" fg:w="512"/><text x="78.2237%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (128 samples, 1.30%)</title><rect x="81.8642%" y="149" width="1.2969%" height="15" fill="rgb(251,123,47)" fg:x="8080" fg:w="128"/><text x="82.1142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (162 samples, 1.64%)</title><rect x="83.1611%" y="181" width="1.6413%" height="15" fill="rgb(221,13,13)" fg:x="8208" fg:w="162"/><text x="83.4111%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (162 samples, 1.64%)</title><rect x="83.1611%" y="165" width="1.6413%" height="15" fill="rgb(238,131,9)" fg:x="8208" fg:w="162"/><text x="83.4111%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.14%)</title><rect x="84.8024%" y="181" width="0.1418%" height="15" fill="rgb(211,50,8)" fg:x="8370" fg:w="14"/><text x="85.0524%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (977 samples, 9.90%)</title><rect x="84.9443%" y="181" width="9.8987%" height="15" fill="rgb(245,182,24)" fg:x="8384" fg:w="977"/><text x="85.1943%" y="191.50">libsystem_plat..</text></g><g><title>bt`bt::main (9,459 samples, 95.84%)</title><rect x="0.1114%" y="197" width="95.8359%" height="15" fill="rgb(242,14,37)" fg:x="11" fg:w="9459"/><text x="0.3614%" y="207.50">bt`bt::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (109 samples, 1.10%)</title><rect x="94.8430%" y="181" width="1.1044%" height="15" fill="rgb(246,228,12)" fg:x="9361" fg:w="109"/><text x="95.0930%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (237 samples, 2.40%)</title><rect x="95.9473%" y="197" width="2.4012%" height="15" fill="rgb(213,55,15)" fg:x="9470" fg:w="237"/><text x="96.1973%" y="207.50">li..</text></g><g><title>libsystem_kernel.dylib`close (82 samples, 0.83%)</title><rect x="98.3485%" y="197" width="0.8308%" height="15" fill="rgb(209,9,3)" fg:x="9707" fg:w="82"/><text x="98.5985%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (33 samples, 0.33%)</title><rect x="99.1793%" y="197" width="0.3343%" height="15" fill="rgb(230,59,30)" fg:x="9789" fg:w="33"/><text x="99.4293%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (24 samples, 0.24%)</title><rect x="99.5137%" y="197" width="0.2432%" height="15" fill="rgb(209,121,21)" fg:x="9822" fg:w="24"/><text x="99.7637%" y="207.50"></text></g><g><title>dyld`start (9,869 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9899%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>bt`main (9,869 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9899%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="271.50">bt`main</text></g><g><title>bt`std::rt::lang_start_internal (9,869 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9899%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="255.50">bt`std::rt::lang_start_internal</text></g><g><title>bt`std::rt::lang_start::_{{closure}} (9,869 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9899%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="239.50">bt`std::rt::lang_start::_{{closure}}</text></g><g><title>bt`std::sys::backtrace::__rust_begin_short_backtrace (9,869 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9899%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="9869"/><text x="0.2500%" y="223.50">bt`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 0.23%)</title><rect x="99.7568%" y="197" width="0.2330%" height="15" fill="rgb(205,98,50)" fg:x="9846" fg:w="23"/><text x="100.0068%" y="207.50"></text></g><g><title>all (9,870 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="9870"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (1 samples, 0.01%)</title><rect x="99.9899%" y="277" width="0.0101%" height="15" fill="rgb(238,207,15)" fg:x="9869" fg:w="1"/><text x="100.2399%" y="287.50"></text></g></svg></svg>
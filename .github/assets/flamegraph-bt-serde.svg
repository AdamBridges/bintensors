<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="2896"><g><title>bt`DYLD-STUB$$free (13 samples, 0.45%)</title><rect x="0.0000%" y="197" width="0.4489%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="13"/><text x="0.2500%" y="207.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::deserialize (1 samples, 0.03%)</title><rect x="0.4489%" y="197" width="0.0345%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="1"/><text x="0.6989%" y="207.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (8 samples, 0.28%)</title><rect x="3.7983%" y="133" width="0.2762%" height="15" fill="rgb(221,193,54)" fg:x="110" fg:w="8"/><text x="4.0483%" y="143.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (16 samples, 0.55%)</title><rect x="4.0746%" y="133" width="0.5525%" height="15" fill="rgb(248,212,6)" fg:x="118" fg:w="16"/><text x="4.3246%" y="143.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (10 samples, 0.35%)</title><rect x="4.6271%" y="133" width="0.3453%" height="15" fill="rgb(208,68,35)" fg:x="134" fg:w="10"/><text x="4.8771%" y="143.50"></text></g><g><title>bt`DYLD-STUB$$malloc (5 samples, 0.17%)</title><rect x="6.2500%" y="101" width="0.1727%" height="15" fill="rgb(232,128,0)" fg:x="181" fg:w="5"/><text x="6.5000%" y="111.50"></text></g><g><title>bt`__rdl_alloc (6 samples, 0.21%)</title><rect x="6.4227%" y="101" width="0.2072%" height="15" fill="rgb(207,160,47)" fg:x="186" fg:w="6"/><text x="6.6727%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (22 samples, 0.76%)</title><rect x="6.6298%" y="101" width="0.7597%" height="15" fill="rgb(228,23,34)" fg:x="192" fg:w="22"/><text x="6.8798%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (29 samples, 1.00%)</title><rect x="7.3895%" y="101" width="1.0014%" height="15" fill="rgb(218,30,26)" fg:x="214" fg:w="29"/><text x="7.6395%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (17 samples, 0.59%)</title><rect x="10.9116%" y="69" width="0.5870%" height="15" fill="rgb(220,122,19)" fg:x="316" fg:w="17"/><text x="11.1616%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.45%)</title><rect x="11.4986%" y="69" width="0.4489%" height="15" fill="rgb(250,228,42)" fg:x="333" fg:w="13"/><text x="11.7486%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.17%)</title><rect x="12.6036%" y="53" width="0.1727%" height="15" fill="rgb(240,193,28)" fg:x="365" fg:w="5"/><text x="12.8536%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.24%)</title><rect x="12.7762%" y="53" width="0.2417%" height="15" fill="rgb(216,20,37)" fg:x="370" fg:w="7"/><text x="13.0262%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="13.0180%" y="53" width="0.0345%" height="15" fill="rgb(206,188,39)" fg:x="377" fg:w="1"/><text x="13.2680%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (9 samples, 0.31%)</title><rect x="16.1257%" y="37" width="0.3108%" height="15" fill="rgb(217,207,13)" fg:x="467" fg:w="9"/><text x="16.3757%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (190 samples, 6.56%)</title><rect x="10.0829%" y="85" width="6.5608%" height="15" fill="rgb(231,73,38)" fg:x="292" fg:w="190"/><text x="10.3329%" y="95.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (136 samples, 4.70%)</title><rect x="11.9475%" y="69" width="4.6961%" height="15" fill="rgb(225,20,46)" fg:x="346" fg:w="136"/><text x="12.1975%" y="79.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (104 samples, 3.59%)</title><rect x="13.0525%" y="53" width="3.5912%" height="15" fill="rgb(210,31,41)" fg:x="378" fg:w="104"/><text x="13.3025%" y="63.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.21%)</title><rect x="16.4365%" y="37" width="0.2072%" height="15" fill="rgb(221,200,47)" fg:x="476" fg:w="6"/><text x="16.6865%" y="47.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (249 samples, 8.60%)</title><rect x="8.3909%" y="101" width="8.5981%" height="15" fill="rgb(226,26,5)" fg:x="243" fg:w="249"/><text x="8.6409%" y="111.50">bt`bincode::..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.35%)</title><rect x="16.6436%" y="85" width="0.3453%" height="15" fill="rgb(249,33,26)" fg:x="482" fg:w="10"/><text x="16.8936%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.79%)</title><rect x="16.9890%" y="101" width="0.7942%" height="15" fill="rgb(235,183,28)" fg:x="492" fg:w="23"/><text x="17.2390%" y="111.50"></text></g><g><title>bt`&lt;bintensors::tensor::TensorInfo as bincode::de::Decode&lt;__Context&gt;&gt;::decode (360 samples, 12.43%)</title><rect x="5.4213%" y="117" width="12.4309%" height="15" fill="rgb(221,5,38)" fg:x="157" fg:w="360"/><text x="5.6713%" y="127.50">bt`&lt;bintensors::ten..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="17.7831%" y="101" width="0.0691%" height="15" fill="rgb(247,18,42)" fg:x="515" fg:w="2"/><text x="18.0331%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for usize&gt;::decode (35 samples, 1.21%)</title><rect x="17.8522%" y="117" width="1.2086%" height="15" fill="rgb(241,131,45)" fg:x="517" fg:w="35"/><text x="18.1022%" y="127.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (11 samples, 0.38%)</title><rect x="19.0608%" y="117" width="0.3798%" height="15" fill="rgb(249,31,29)" fg:x="552" fg:w="11"/><text x="19.3108%" y="127.50"></text></g><g><title>bt`bincode::varint::decode_unsigned::varint_decode_u32 (14 samples, 0.48%)</title><rect x="19.4406%" y="117" width="0.4834%" height="15" fill="rgb(225,111,53)" fg:x="563" fg:w="14"/><text x="19.6906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.03%)</title><rect x="19.9240%" y="101" width="0.0345%" height="15" fill="rgb(238,160,17)" fg:x="577" fg:w="1"/><text x="20.1740%" y="111.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (435 samples, 15.02%)</title><rect x="4.9724%" y="133" width="15.0207%" height="15" fill="rgb(214,148,48)" fg:x="144" fg:w="435"/><text x="5.2224%" y="143.50">bt`bincode::features::i..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="19.9240%" y="117" width="0.0691%" height="15" fill="rgb(232,36,49)" fg:x="577" fg:w="2"/><text x="20.1740%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="19.9586%" y="101" width="0.0345%" height="15" fill="rgb(209,103,24)" fg:x="578" fg:w="1"/><text x="20.2086%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.03%)</title><rect x="19.9586%" y="85" width="0.0345%" height="15" fill="rgb(229,88,8)" fg:x="578" fg:w="1"/><text x="20.2086%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="19.9586%" y="69" width="0.0345%" height="15" fill="rgb(213,181,19)" fg:x="578" fg:w="1"/><text x="20.2086%" y="79.50"></text></g><g><title>bt`DYLD-STUB$$calloc (6 samples, 0.21%)</title><rect x="20.4420%" y="101" width="0.2072%" height="15" fill="rgb(254,191,54)" fg:x="592" fg:w="6"/><text x="20.6920%" y="111.50"></text></g><g><title>bt`DYLD-STUB$$memcpy (4 samples, 0.14%)</title><rect x="20.6492%" y="101" width="0.1381%" height="15" fill="rgb(241,83,37)" fg:x="598" fg:w="4"/><text x="20.8992%" y="111.50"></text></g><g><title>bt`__rdl_alloc_zeroed (9 samples, 0.31%)</title><rect x="20.7873%" y="101" width="0.3108%" height="15" fill="rgb(233,36,39)" fg:x="602" fg:w="9"/><text x="21.0373%" y="111.50"></text></g><g><title>bt`bincode::de::impls::_&lt;impl bincode::de::Decode&lt;Context&gt; for u64&gt;::decode (23 samples, 0.79%)</title><rect x="21.0981%" y="101" width="0.7942%" height="15" fill="rgb(226,3,54)" fg:x="611" fg:w="23"/><text x="21.3481%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (10 samples, 0.35%)</title><rect x="22.9627%" y="69" width="0.3453%" height="15" fill="rgb(245,192,40)" fg:x="665" fg:w="10"/><text x="23.2127%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.41%)</title><rect x="23.3080%" y="69" width="0.4144%" height="15" fill="rgb(238,167,29)" fg:x="675" fg:w="12"/><text x="23.5580%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.07%)</title><rect x="24.7238%" y="53" width="0.0691%" height="15" fill="rgb(232,182,51)" fg:x="716" fg:w="2"/><text x="24.9738%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.62%)</title><rect x="24.7928%" y="53" width="0.6215%" height="15" fill="rgb(231,60,39)" fg:x="718" fg:w="18"/><text x="25.0428%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.07%)</title><rect x="25.4144%" y="53" width="0.0691%" height="15" fill="rgb(208,69,12)" fg:x="736" fg:w="2"/><text x="25.6644%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (13 samples, 0.45%)</title><rect x="28.7638%" y="37" width="0.4489%" height="15" fill="rgb(235,93,37)" fg:x="833" fg:w="13"/><text x="29.0138%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (206 samples, 7.11%)</title><rect x="22.3757%" y="85" width="7.1133%" height="15" fill="rgb(213,116,39)" fg:x="648" fg:w="206"/><text x="22.6257%" y="95.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (167 samples, 5.77%)</title><rect x="23.7224%" y="69" width="5.7666%" height="15" fill="rgb(222,207,29)" fg:x="687" fg:w="167"/><text x="23.9724%" y="79.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (116 samples, 4.01%)</title><rect x="25.4834%" y="53" width="4.0055%" height="15" fill="rgb(206,96,30)" fg:x="738" fg:w="116"/><text x="25.7334%" y="63.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.28%)</title><rect x="29.2127%" y="37" width="0.2762%" height="15" fill="rgb(218,138,4)" fg:x="846" fg:w="8"/><text x="29.4627%" y="47.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (229 samples, 7.91%)</title><rect x="21.8923%" y="101" width="7.9075%" height="15" fill="rgb(250,191,14)" fg:x="634" fg:w="229"/><text x="22.1423%" y="111.50">bt`bincode:..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.31%)</title><rect x="29.4890%" y="85" width="0.3108%" height="15" fill="rgb(239,60,40)" fg:x="854" fg:w="9"/><text x="29.7390%" y="95.50"></text></g><g><title>bt`core::str::converts::from_utf8 (67 samples, 2.31%)</title><rect x="29.7997%" y="101" width="2.3135%" height="15" fill="rgb(206,27,48)" fg:x="863" fg:w="67"/><text x="30.0497%" y="111.50">b..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (24 samples, 0.83%)</title><rect x="32.1133%" y="101" width="0.8287%" height="15" fill="rgb(225,35,8)" fg:x="930" fg:w="24"/><text x="32.3633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (7 samples, 0.24%)</title><rect x="32.9420%" y="101" width="0.2417%" height="15" fill="rgb(250,213,24)" fg:x="954" fg:w="7"/><text x="33.1920%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.21%)</title><rect x="33.1837%" y="101" width="0.2072%" height="15" fill="rgb(247,123,22)" fg:x="961" fg:w="6"/><text x="33.4337%" y="111.50"></text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::string::String&gt;::decode (475 samples, 16.40%)</title><rect x="20.1657%" y="117" width="16.4019%" height="15" fill="rgb(231,138,38)" fg:x="584" fg:w="475"/><text x="20.4157%" y="127.50">bt`bincode::features::imp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (92 samples, 3.18%)</title><rect x="33.3909%" y="101" width="3.1768%" height="15" fill="rgb(231,145,46)" fg:x="967" fg:w="92"/><text x="33.6409%" y="111.50">lib..</text></g><g><title>bt`bincode::features::impl_alloc::_&lt;impl bincode::de::Decode&lt;Context&gt; for alloc::vec::Vec&lt;T&gt;&gt;::decode (17 samples, 0.59%)</title><rect x="36.5677%" y="117" width="0.5870%" height="15" fill="rgb(251,118,11)" fg:x="1059" fg:w="17"/><text x="36.8177%" y="127.50"></text></g><g><title>bt`core::str::converts::from_utf8 (6 samples, 0.21%)</title><rect x="37.1547%" y="117" width="0.2072%" height="15" fill="rgb(217,147,25)" fg:x="1076" fg:w="6"/><text x="37.4047%" y="127.50"></text></g><g><title>bt`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (87 samples, 3.00%)</title><rect x="38.5359%" y="101" width="3.0041%" height="15" fill="rgb(247,81,37)" fg:x="1116" fg:w="87"/><text x="38.7859%" y="111.50">bt`..</text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (164 samples, 5.66%)</title><rect x="37.3619%" y="117" width="5.6630%" height="15" fill="rgb(209,12,38)" fg:x="1082" fg:w="164"/><text x="37.6119%" y="127.50">bt`hash..</text></g><g><title>bt`core::hash::BuildHasher::hash_one (43 samples, 1.48%)</title><rect x="41.5401%" y="101" width="1.4848%" height="15" fill="rgb(227,1,9)" fg:x="1203" fg:w="43"/><text x="41.7901%" y="111.50"></text></g><g><title>bt`bincode::features::impl_std::_&lt;impl bincode::de::Decode&lt;Context&gt; for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::decode (668 samples, 23.07%)</title><rect x="19.9931%" y="133" width="23.0663%" height="15" fill="rgb(248,47,43)" fg:x="579" fg:w="668"/><text x="20.2431%" y="143.50">bt`bincode::features::impl_std::_&lt;imp..</text></g><g><title>bt`hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="43.0249%" y="117" width="0.0345%" height="15" fill="rgb(221,10,30)" fg:x="1246" fg:w="1"/><text x="43.2749%" y="127.50"></text></g><g><title>bt`&lt;bintensors::tensor::Metadata as bincode::de::Decode&lt;__Context&gt;&gt;::decode (1,152 samples, 39.78%)</title><rect x="3.7983%" y="149" width="39.7790%" height="15" fill="rgb(210,229,1)" fg:x="110" fg:w="1152"/><text x="4.0483%" y="159.50">bt`&lt;bintensors::tensor::Metadata as bincode::de::Decode&lt;__Context..</text></g><g><title>bt`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.52%)</title><rect x="43.0594%" y="133" width="0.5180%" height="15" fill="rgb(222,148,37)" fg:x="1247" fg:w="15"/><text x="43.3094%" y="143.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::read_metadata (1,235 samples, 42.65%)</title><rect x="2.0373%" y="165" width="42.6450%" height="15" fill="rgb(234,67,33)" fg:x="59" fg:w="1235"/><text x="2.2873%" y="175.50">bt`bintensors::tensor::BinTensors::read_metadata</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (32 samples, 1.10%)</title><rect x="43.5773%" y="149" width="1.1050%" height="15" fill="rgb(247,98,35)" fg:x="1262" fg:w="32"/><text x="43.8273%" y="159.50"></text></g><g><title>bt`bintensors::tensor::BinTensors::deserialize (1,242 samples, 42.89%)</title><rect x="2.0373%" y="181" width="42.8867%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="1242"/><text x="2.2873%" y="191.50">bt`bintensors::tensor::BinTensors::deserialize</text></g><g><title>bt`core::ptr::drop_in_place&lt;bintensors::tensor::BinTensorError&gt; (7 samples, 0.24%)</title><rect x="44.6823%" y="165" width="0.2417%" height="15" fill="rgb(213,79,30)" fg:x="1294" fg:w="7"/><text x="44.9323%" y="175.50"></text></g><g><title>bt`memmap2::os::MmapInner::map (74 samples, 2.56%)</title><rect x="44.9240%" y="181" width="2.5552%" height="15" fill="rgb(246,177,23)" fg:x="1301" fg:w="74"/><text x="45.1740%" y="191.50">bt..</text></g><g><title>libsystem_kernel.dylib`__mmap (74 samples, 2.56%)</title><rect x="44.9240%" y="165" width="2.5552%" height="15" fill="rgb(230,62,27)" fg:x="1301" fg:w="74"/><text x="45.1740%" y="175.50">li..</text></g><g><title>bt`memmap2::os::file_len (23 samples, 0.79%)</title><rect x="47.4793%" y="181" width="0.7942%" height="15" fill="rgb(216,154,8)" fg:x="1375" fg:w="23"/><text x="47.7293%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`fstat (23 samples, 0.79%)</title><rect x="47.4793%" y="165" width="0.7942%" height="15" fill="rgb(244,35,45)" fg:x="1375" fg:w="23"/><text x="47.7293%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (244 samples, 8.43%)</title><rect x="48.2735%" y="165" width="8.4254%" height="15" fill="rgb(251,115,12)" fg:x="1398" fg:w="244"/><text x="48.5235%" y="175.50">libsystem_ke..</text></g><g><title>bt`std::fs::OpenOptions::_open (245 samples, 8.46%)</title><rect x="48.2735%" y="181" width="8.4599%" height="15" fill="rgb(240,54,50)" fg:x="1398" fg:w="245"/><text x="48.5235%" y="191.50">bt`std::fs::..</text></g><g><title>libsystem_kernel.dylib`open (1 samples, 0.03%)</title><rect x="56.6989%" y="165" width="0.0345%" height="15" fill="rgb(233,84,52)" fg:x="1642" fg:w="1"/><text x="56.9489%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (7 samples, 0.24%)</title><rect x="56.7334%" y="181" width="0.2417%" height="15" fill="rgb(207,117,47)" fg:x="1643" fg:w="7"/><text x="56.9834%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (39 samples, 1.35%)</title><rect x="56.9751%" y="181" width="1.3467%" height="15" fill="rgb(249,43,39)" fg:x="1650" fg:w="39"/><text x="57.2251%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="58.3218%" y="181" width="0.0345%" height="15" fill="rgb(209,38,44)" fg:x="1689" fg:w="1"/><text x="58.5718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (59 samples, 2.04%)</title><rect x="62.9144%" y="165" width="2.0373%" height="15" fill="rgb(236,212,23)" fg:x="1822" fg:w="59"/><text x="63.1644%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.55%)</title><rect x="64.9517%" y="165" width="0.5525%" height="15" fill="rgb(242,79,21)" fg:x="1881" fg:w="16"/><text x="65.2017%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8 samples, 0.28%)</title><rect x="65.5041%" y="165" width="0.2762%" height="15" fill="rgb(211,96,35)" fg:x="1897" fg:w="8"/><text x="65.7541%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (90 samples, 3.11%)</title><rect x="73.9641%" y="149" width="3.1077%" height="15" fill="rgb(253,215,40)" fg:x="2142" fg:w="90"/><text x="74.2141%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_tiny (657 samples, 22.69%)</title><rect x="58.3564%" y="181" width="22.6865%" height="15" fill="rgb(211,81,21)" fg:x="1690" fg:w="657"/><text x="58.6064%" y="191.50">libsystem_malloc.dylib`free_tiny</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (442 samples, 15.26%)</title><rect x="65.7804%" y="165" width="15.2624%" height="15" fill="rgb(208,190,38)" fg:x="1905" fg:w="442"/><text x="66.0304%" y="175.50">libsystem_malloc.dylib`..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (115 samples, 3.97%)</title><rect x="77.0718%" y="149" width="3.9710%" height="15" fill="rgb(235,213,38)" fg:x="2232" fg:w="115"/><text x="77.3218%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.79%)</title><rect x="81.0428%" y="181" width="0.7942%" height="15" fill="rgb(237,122,38)" fg:x="2347" fg:w="23"/><text x="81.2928%" y="191.50"></text></g><g><title>bt`bt::main (2,478 samples, 85.57%)</title><rect x="0.4834%" y="197" width="85.5663%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="2478"/><text x="0.7334%" y="207.50">bt`bt::main</text></g><g><title>libsystem_platform.dylib`_platform_memset (122 samples, 4.21%)</title><rect x="81.8370%" y="181" width="4.2127%" height="15" fill="rgb(240,68,47)" fg:x="2370" fg:w="122"/><text x="82.0870%" y="191.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__munmap (300 samples, 10.36%)</title><rect x="86.0497%" y="197" width="10.3591%" height="15" fill="rgb(210,16,53)" fg:x="2492" fg:w="300"/><text x="86.2997%" y="207.50">libsystem_kerne..</text></g><g><title>libsystem_kernel.dylib`close (26 samples, 0.90%)</title><rect x="96.4088%" y="197" width="0.8978%" height="15" fill="rgb(235,124,12)" fg:x="2792" fg:w="26"/><text x="96.6588%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (38 samples, 1.31%)</title><rect x="97.3066%" y="197" width="1.3122%" height="15" fill="rgb(224,169,11)" fg:x="2818" fg:w="38"/><text x="97.5566%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (19 samples, 0.66%)</title><rect x="98.6188%" y="197" width="0.6561%" height="15" fill="rgb(250,166,2)" fg:x="2856" fg:w="19"/><text x="98.8688%" y="207.50"></text></g><g><title>all (2,896 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (2,896 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>bt`main (2,896 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="271.50">bt`main</text></g><g><title>bt`std::rt::lang_start_internal (2,896 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="255.50">bt`std::rt::lang_start_internal</text></g><g><title>bt`std::rt::lang_start::_{{closure}} (2,896 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="239.50">bt`std::rt::lang_start::_{{closure}}</text></g><g><title>bt`std::sys::backtrace::__rust_begin_short_backtrace (2,896 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="2896"/><text x="0.2500%" y="223.50">bt`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.73%)</title><rect x="99.2749%" y="197" width="0.7251%" height="15" fill="rgb(233,208,19)" fg:x="2875" fg:w="21"/><text x="99.5249%" y="207.50"></text></g></svg></svg>